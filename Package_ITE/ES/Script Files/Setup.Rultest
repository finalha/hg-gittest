
////////////////////////////////////////////////////////////////////////////////
//                                                                            
//  File Name:	Setup.rul                                                   
//                                                                            
//  Description:	InstallShield script                                        
//                                                                            
//  Comments:	This script was generated based on the selections you made in
//           	the Project Wizard.  Refer to the help topic entitled "Modify      
//           	the script that the Project Wizard generates" for information
//				on possible next steps.
//
////////////////////////////////////////////////////////////////////////////////


// Include header files
    
#include "ifx.h"
#include "CMSGDLG.rul"

////////////////////// STRING defines ////////////////////////////
#define VERSION_ES_PACKAGE_DATE "ES v4.1.0 "
//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----


    // your script function prototypes

    // your global variables     
prototype StrIsNums( STRING );
prototype PostgresInstall1();
prototype PostgresInstall2();
prototype PostgresUninstall();
prototype WriteoneFile(STRING, STRING, STRING);
prototype InputPostgresDbDataDir();    
prototype InputPostgresInfo();
prototype BSInstall();
prototype BSUninstall();
prototype EAPInstall();
prototype EAPUninstall();
prototype CheckIIS();
prototype CheckEAP();
prototype WriteRegistryWeb();  
prototype WriteRegistryPostgres();
prototype DeleteRegistryWeb();  
prototype DeleteRegistryPostgres();
prototype ReplaceContentOfFile( STRING, STRING, STRING, STRING);  
prototype ReplaceLineOfFile( BOOL, STRING, STRING, STRING , STRING);  
prototype BuildPgDB( STRING , STRING, STRING, STRING, STRING);  
prototype RunApplication( STRING , STRING, BOOL, BOOL);    
prototype DeleteLogFile();   
prototype WriteLogFile( STRING );
prototype WriteConnectFile( STRING );  
prototype STRING ReadConnectFile();
prototype STRING GetEncyptConnStr(STRING);
prototype AddOrReplaceLineOfFile( BOOL, STRING, STRING, STRING,STRING, STRING ) ;
prototype CheckEAP2008();
prototype CheckPathSpecChar(STRING);
prototype GetSysInfo(); 
prototype CheckNeedInstallNetFx3();  
prototype STRING GetTEMPDIRNAME();    
prototype STRING ReadString(STRING,STRING,BOOL);
prototype CheckCurrentRight(STRING); 
prototype CreateHomeShortCut();
prototype GetDefaultSiteIPPort();
prototype STRING GetTestDefaultSiteReturnCode(); 
prototype ReplaceHomeShortCutOnFinished(); 
prototype GetIIS7Configs(); 
prototype CheckAspnetState(); 
prototype CheckIIS7NeedAspnet();  
prototype CheckIIS7FeaturesNeed();  
prototype NUMBER GetTestNetbrainReturnCode();     
prototype BuildPgDBPWD( string,string, string,string);
prototype STRING RecordTimeLog();
prototype BenchmarklogUpdate(); 
prototype RemovePatchData();    
prototype Removecheckupdatefiles();
prototype RebuildFlag();
prototype IsSameLargeVersion();
prototype IsSameLargeVersion2();  
prototype IsSameLargeVersion3();
prototype OldVersionIsLess410();
prototype SignSetupexe();
//
STRING svPostgreDbDataDir;          //用户选择的数据目录  
STRING svDBUserName, svDBPwd, svDBPort;
STRING svPassworDir;  
STRING svUserName, szCompany;
NUMBER nvInstallDataDir; 
NUMBER nvCheckDeleteAllData;
STRING svDataSetupTime;
STRING svDataDirRoot;
STRING svLogFile;
STRING svTempVal;
STRING svOSVer; 
STRING LOGFILE_PATH;
STRING svDefaultSiteIP;
STRING svDefaultSitePort;
STRING svDefaultSiteName;
STRING svCurrentVersion; 

STRING svPGInstallDir,svPGUserName,svPGPassWord,svPGDBdir,svPGHost;  
STRING LOGFILE;

STRING svLICSiteIndex,svLICSiteName,svLICHost,svLICPort,svLICDBname,svLICDBpwd,svLICInstalldir,svLICAppPool,svLICVdir,svLICDisableFolderList;

STRING svGWSiteIndex,svGWSiteName,svGWHost,svGWPort,svGWDBname,svGWDBpwd,svGWInstalldir,svGWAppPool,svGWVdir,svGWDisableFolderList;

STRING svWSPName,svWSPDir;


#define REGNETFX35 "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.5"                   
//#define LOGFILE_PATH "c:\\"
#define LOGFILE_NAME "nbesinstall.log"   
#define CONNECTFILE_SRC_NAME "consrc.dat"
#define CONNECTFILE_DES_NAME "condes.dat" 
#define DISKSPACE_G 1024
                  
#define REGPATH_WEBSERVER 	"SOFTWARE\\NetBrain\\NetBrain Enterprise Server\\WebServer"
#define REGKEY_INSTALLDIR 	"netbrainDir"
#define REGPATH_DBINFO	 	"SOFTWARE\\NetBrain"
#define REGKEY_PG_DATADIR 	"EAPPostgresDataDir"
#define REGKEY_PG_USERNAME 	"EAPPostgresDataUserName"
#define REGKEY_PG_PASSWORD 	"EAPPostgresDataPwd"
#define REGKEY_PG_PORT 		"EAPPostgresDataPort"
#define REGKEY_PG_SETTIME 	"EAPDataSetupTime"
#define REGKEY_ROOTDIR 		"EAPDataDirRoot"
#define REGKEY_ES_VERSION   "EAPCurrentVersion"

#define MSG_ERR_UNINSTALL_FIRST 	"The NetBrain Enterprise Server has already been installed.\nPlease uninstall the old one fristly."
#define MSG_ERR_NEED_2003SERVER 	"The NetBrain Enterprise Server can be only installed in the Windows 2003 Server. The installation will be terminated."
#define MSG_ERR_NEED_IIS 		"Please install Internet Information Server(IIS) in this machine first, then run NetBrain setup again. \n( To install IIS, go to \n Control Panel >> Add or Remove Programs >> Add/Remove Window Components \n check \"Application Server\" box)."
#define MSG_ERR_NEED_IIS2008 		"Please install Internet Information Server(IIS) in this machine first, then run NetBrain setup again. \n( To install IIS, go to \n My Computer >> right-click >> Manange >> Roles >> Add Roles >> Next >> \n check \"Webserver(IIS)\" box)."
#define MSG_ERR_NEED_IISASPNET   "Failed to check IIS, please install ASP.NET feature in Web Server (IIS)"
#define MSG_ERR_NEED_IISCommon   "Failed to check IIS, please reinstall Web Server (IIS)" //Common HTTP Features in 
#define MSG_OK_CHECK_SYSTEM 		"Succeed to check operation system and IIS."
#define MSG_INFO_NEED_INSTALLDATA 	"Need to install the data."
#define MSG_INFO_OLDPATH_EXISTS 	"The old root path has already existed."
#define MSG_INFO_BUILD_SETUPTIME 	"Need to save the timestamp of building data."
#define MSG_INFO_FINISH_CHECK_OLDDATA 	"Finish to check the old data successfully."
#define MSG_INFO_STEP_OUT_WELCOME 	"Step out: Welcome."
#define MSG_ERRO_CHECK_ADMIN	 	"You don't have enough privilege to continue the installation, please contact the administrator. If this is Windows 2008, maybe you need rerun the installation program by menu 'Run as administrator'."
#define MSG_ERRO_CHECK_SP_VER	 	"Your Windows Service Pack is not up to date, please update."
#define MSG_INFO_STEP_OUT_SYSINFO 	"Step out: System information"
#define MSG_INFO_STEP_OUT_LICENSE 	"Step out: License"
#define MSG_INFO_STEP_OUT_CUSTOMERINFO 	"Step out: Customer information"
#define MSG_ERR_PGINFO_EMPTY	 	"The Port,Username and Password cannot be empty."
#define MSG_ERR_PGINFO_INVALID_CHAR	"A Password cannot contain any of the following characters: <>&\'\";"
#define MSG_ERR_PGINFO_INVALID_CHAR_SPACE "A Password cannot contain spaces "
#define MSG_ERR_PGINFO_PORT_INVALID	"The port: %s is in use, please enter another."
#define MSG_INFO_STEP_OUT_INPUT_PGINFO 	"Step out: Input postgres info"
#define MSG_ERR_PATH_FORMAT	 	"The specified folder:\n'%s'\n is invalid,incomplete or write protected.Please type a full path with drive letter;for example'C:\\XXXX'."
#define MSG_INFO_STEP_OUT_INPUT_ROOTDIR 	"Step out: Input root dir"
#define MSG_INFO_STEP_OUT_INPUT_PGDIR 		"Step out: Input postgres database dir"
#define MSG_ERRO_CHECK_PG_ADMIN	 	"You are not authorized to install the postgresql, please select a different destination folder."
#define MSG_INFO_STEP_OUT_STARTCOPY 		"Step out: Start Copy"
#define MSG_INFO_STEP_OUT_INSTALLPG 		"Step out: Install postgresql"
#define MSG_ERR_BUILD_PDDB	 			"Failed to build postgres"
#define MSG_INFO_STEP_OUT_BUILD_PDDB 		"Step out: build postgres"
#define MSG_ERR_EXE_SQL_WS3 			"Failed to execute the ws3.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WS3 		"Step out: execute the ws3.sql"
#define MSG_ERR_EXE_SQL_WS3_1 			"Failed to execute the ws3-1.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WS3_1 	"Step out: execute the ws3-1.sql"
#define MSG_ERR_EXE_SQL_WS3_2 			"Failed to execute the ws3-2.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WS3_2 	"Step out: execute the ws3-2.sql"
#define MSG_ERR_EXE_SQL_WS3_2_2 		"Failed to execute the ws3-2-2.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WS3_2_2 	"Step out: execute the ws3-2-2.sql"
#define MSG_ERR_EXE_SQL_WS3_3 		"Failed to execute the ws3-3.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WS3_3 	"Step out: execute the ws3-3.sql"
#define MSG_ERR_EXE_SQL_WS3_4 		"Failed to execute the ws3-4.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WS3_4 	"Step out: execute the ws3-4.sql"  
#define MSG_ERR_EXE_SQL_WS311 		"Failed to execute the ws311.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WS311 	"Step out: execute the ws311.sql"
#define MSG_ERR_EXE_SQL_WS32 		"Failed to execute the ws3.2.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WS32 	"Step out: execute the ws3.2.sql"

#define MSG_ERR_EXE_SQL_WSVM 		"Failed to execute the wsvm.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WSVM 	"Step out: execute the wsvm.sql"
#define MSG_ERR_EXE_SQL_WS31c 		"Failed to execute the ws31c.sql"
#define MSG_INFO_STEP_OUT_EXE_SQL_WS31c 	"Step out: execute the ws31c.sql"
#define MSG_ERR_CONF_FIX_GRAPHICS 		"Failed to replace fix_Graphics.ini"
#define MSG_INFO_STEP_OUT_CONF_FIX_GRAPHICS 	"Step out: replace fix_Graphics.ini"
#define MSG_ERR_CONF_WEB_CONFIG 		"Failed to replace web.config."
#define MSG_INFO_STEP_OUT_CONF_WEB_CONFIG 	"Step out: replace web.config."
#define MSG_ERR_CONF_FIX_LOG 			"Failed to replace fix_log.property."
#define MSG_INFO_STEP_OUT_CONF_FIX_LOG 		"Step out: replace fix_log.property."
#define MSG_ERR_CONF_ASPNET_STATE 		"Failed to set aspnet_state service status."
#define MSG_INFO_STEP_OUT_ASPNET_STATE 		"Step out: set aspnet_state service status."
#define MSG_INFO_STEP_OUT_INSTALL_USER 		"Step out: add full control of config files to current user."
#define MSG_INFO_STEP_OUT_INSTALL_IIS 		"Step out: install IIS virtual folder."                  
#define MSG_ERR_PGINFO_PORT_CONVERT 		"Failed to convert the port."
#define MSG_ERR_PGINFO_PORT_DIGIT	 		"The port should be an integer."
#define MSG_ERR_PGINFO_PORT_RANGE 		"The port should be in 100 ~ 65535."
#define MSG_ERR_PGINFO_PWD_LEN 			"The length of password should be in 6 ~ 12."
#define MSG_ERR_PGINFO_DATADIR_EMPTY			"The specified database data folder must be empty."
#define MSG_INFO_STEP_OUT_INSTALL_NBKF 		"Step out: install nbkf check nb10002.ini."
#define MSG_ERR_CONF_NBKF 		"Failed to install nbkf check nb10002.ini ."  
#define MSG_INFO_STEP_OUT_ADDREGNETWORKSERVICE "Step out: add network service in reg clsid"
#define MSG_ERR_ADDREGNETWORKSERVICE "Failed to add network service in reg clsid"
#define MSG_ERR_RENAME_OLD_DIR "Failed to rename directory Enterprise Server 3.0 "
#define MSG_ERR_NEED_2008SERVER 	"The NetBrain Enterprise Server can be only installed in the Windows 2003 or 2008 Server. The installation will be terminated."
#define MSG_INFO_NETBRAINCHECKER "Step out:NetbrainChecker"
#define MSG_INFO_STEP_OUT_INSTALL_IISISAPI "Step out: set IIS ISAPI." 
#define MSG_ERR_INSTALLWIN7NETFX3 "Failed to ocsetup NetFx3"
#define DISKSPACENOTENOUGH "There is not enough disk space(at least 1G )."
#define MSG_ERR_NETFX35_NOTEXISTS "Error:No DotNetFrameWork35"      
#define MSG_NETFX35_EXISTS "OK:DotNetFrameWork35 Exists"
#define MSG_INFO_STEP_NETSTAT "Step out:Run netstat to check port"
#define MSG_ERR_CONNFILE_WRITE "Failed to write Connect File!"
#define MSG_ERR_ENCRYPT_CONNSTR "Failed to run EncryptFile !"
#define MSG_INFO_STEP_OUT_REGKEY_START_ASPNET_STATE_CHECK "check or add reg aspnet_state key :start"
#define MSG_STEP_BEFORE_RUN_TSCHMOD "Running Tschmod" 
#define MSG_ERR_PGINFO_DATADIR_DISKROOT "The specified database data folder can not be the system root partition."
#define MSG_ERR_MODIFYPGPWD "Failed to change postgres pwd."
#define MSG_INFO_SETP_MODIFYPGPWD "Step out:change postgres pwd."   
#define MSG_INFO_STEP_OUT_UPGRADE_DATADIR 		"Step out: Upgrade data dir."

#define PGPWDDEFAULT "postgres"  
#define PGHOSTDEFAULT "127.0.0.1" 

#define DEFAULTSITEINDEX "1"  
#define DEFAULTSITENAME "Default Web Site"  

//uninstallsetupsign
function SignSetupexe()
begin
	DeleteFile (ProgramFilesFolder ^ "InstallShield Installation Information\\{EFCBB8AD-C4C9-4AED-98C7-90C16C852469}\\setup.exe"); 

	CopyFile(SUPPORTDIR ^ "setup.exe", ProgramFilesFolder ^ "InstallShield Installation Information\\{EFCBB8AD-C4C9-4AED-98C7-90C16C852469}\\setup.exe");          
end; 

//升级安装时，rebuild L3
function RebuildFlag() 
	number  nvReturn1;
begin  
	if( nvInstallDataDir != 1 ) && ( IsSameLargeVersion3()==0) then  //Bug 43074
		nvReturn1 = ReplaceLineOfFile( FALSE, INSTALLDIR ^ "Enterprise Server\\WebServer\\Conf\\", "UpdateRebuild.ini", "NeedRebuild=","NeedRebuild=1" );
		nvReturn1 = ReplaceLineOfFile( FALSE, INSTALLDIR ^ "Enterprise Server\\WebServer\\Conf\\", "UpdateRebuild.ini", "NeedRebuildCacheFiles=","NeedRebuildCacheFiles=1" );
		if( nvReturn1 != 0 ) then
	 		WriteLogFile( "Failed to set rebuildtopoflag" );  		
		endif;
		WriteLogFile( "Succed to set rebuildtopoflag" );		
	endif;
	
	if( nvInstallDataDir != 1 ) && ( OldVersionIsLess410()==1) then 
		nvReturn1 = ReplaceLineOfFile( FALSE, INSTALLDIR ^ "Enterprise Server\\WebServer\\Conf\\", "UpdateRebuild.ini", "NeedRebuildCacheFiles=","NeedRebuildCacheFiles=1" );
		if( nvReturn1 != 0 ) then
	 		WriteLogFile( "Failed to set NeedRebuildCacheFiles" );  		
		endif;
		WriteLogFile( "Succed to set NeedRebuildCacheFiles" );		
	endif;
	
end;

//删除PathcData文件夹
function RemovePatchData()
	number  nvReturn1;
	string  szFileName; 
begin 
	WriteLogFile("step :begin remove patch data: ");   
	nvReturn1=FindAllFiles(INSTALLDIR^"Enterprise Server\\WebServer\\patchdata","*.*",szFileName,RESET);
        while(nvReturn1 = 0)
	        SetFileInfo ( szFileName ,FILE_ATTRIBUTE , FILE_ATTR_NORMAL ,"" );
	        nvReturn1=FindAllFiles(INSTALLDIR^"Enterprise Server\\WebServer\\patchdata","*.*",szFileName,CONTINUE); 
        endwhile; 
	nvReturn1=DeleteDir(INSTALLDIR ^ "Enterprise Server\\WebServer\\patchdata",ALLCONTENTS);
	if(nvReturn1<0) then
		WriteLogFile("failed :remove patch data: "); 
	else
		WriteLogFile("succeed :remove patch data: ");		
	endif;   

end; 

function Removecheckupdatefiles()
	number  nvReturn1,nReturn;
	string  szFileName; 
	LIST  listID;
begin 
	
	if !Is(FILE_EXISTS,INSTALLDIR^"Enterprise Server\\WebServer\\checkupdatefiles") then    
		return 1;
	endif;  //Bug 43541 
	
	WriteLogFile("step :begin remove checkupdatefiles data: ");   
	nvReturn1=FindAllFiles(INSTALLDIR^"Enterprise Server\\WebServer\\checkupdatefiles","*.*",szFileName,RESET);
        while(nvReturn1 = 0)
	        SetFileInfo ( szFileName ,FILE_ATTRIBUTE , FILE_ATTR_NORMAL ,"" );
	        nvReturn1=FindAllFiles(INSTALLDIR^"Enterprise Server\\WebServer\\checkupdatefiles","*.*",szFileName,CONTINUE); 
        endwhile; 
        
    DeleteAgain:
	nvReturn1=DeleteDir(INSTALLDIR ^ "Enterprise Server\\WebServer\\checkupdatefiles",ALLCONTENTS);
	if(nvReturn1<0) then
		WriteLogFile("failed :remove checkupdatefiles data: "); 
		nReturn=SdFilesInUse("","Unable to delete the folder below. Maybe some files inside the folder are in use. Please check!",INSTALLDIR ^ "Enterprise Server\\WebServer\\checkupdatefiles",listID); 
		if (nReturn = IDRETRY) then
       		goto DeleteAgain;   
       	endif;
	else
		WriteLogFile("succeed :remove checkupdatefiles data: ");		
	endif;
		
end;

function BenchmarklogUpdate()
	string  szBenchmarklogDir;
	string  szBenchmarklogDir2;  
	string  szFoldername; 
	string  szFoldernameOnly;   
	string  szFoldernameNew;
	number  nvReturn1;
	LIST   listDirs;
begin    
	szBenchmarklogDir= INSTALLDIR^"Enterprise Server" +"\\WebServer\\BenchmarkLog";
	if (ExistsDir ( szBenchmarklogDir ) = 0)then    
		szBenchmarklogDir2 = szBenchmarklogDir+"\\2"; 
		if (ExistsDir ( szBenchmarklogDir2 ) = 0)then 
			return 0; 
		else
			listDirs = ListCreate (STRINGLIST); 
			nvReturn1 = FindAllDirs (szBenchmarklogDir, EXCLUDE_SUBDIR, listDirs);

			if(CreateDir (szBenchmarklogDir2)<0) then
				WriteLogFile("error :Create dir failed: "+szBenchmarklogDir2);
			endif; 
			szBenchmarklogDir2=szBenchmarklogDir2+"\\1"; 
			if(CreateDir (szBenchmarklogDir2)<0) then
			    WriteLogFile("error :Create dir failed: "+szBenchmarklogDir2);
			endif;
			
			if ( nvReturn1>=0) then 		       		    		          
		        nvReturn1 = ListGetFirstString (listDirs, szFoldername);
		        // Loop while list items continue to be retrieved.
		        while (nvReturn1 != END_OF_LIST) 
		            szFoldernameOnly =  szFoldername;
		            StrReplace ( szFoldernameOnly, szBenchmarklogDir, "", 0 );
		            szFoldernameNew =  szBenchmarklogDir2 + szFoldernameOnly;
                    //MessageBox (szFoldernameNew, INFORMATION);
		            if(RenameFile ( szFoldername, szFoldernameNew )<0)  then  
   	    				WriteLogFile( "error: move benchmarklog folder failed!" );
   	    			endif; 
		            // Get the next string in the list. 
		            nvReturn1 = ListGetNextString (listDirs, szFoldername);
		        endwhile;
		    endif;
			// Remove the list from memory. 
			ListDestroy (listDirs);
		    
		endif;
	endif;
end;    

function STRING RecordTimeLog()
	number  nvReturn1;
	string  svResult1,szDateTimetmp;
begin   	
	   	GetSystemInfo( DATE, nvReturn1, svResult1 );  
   		szDateTimetmp = svResult1;
   		szDateTimetmp = szDateTimetmp + " ";
   		GetSystemInfo( TIME, nvReturn1, svResult1 );
   		szDateTimetmp = szDateTimetmp + svResult1; 
   		return szDateTimetmp;
   		//WriteLogFile(szDateTimetmp);     		
end;

function CheckIIS7FeaturesNeed()
STRING svIIS7aspnet,svIIS7aspnetrole; 
number nindex;
begin 
	WriteLogFile("check whether iiswebserver Static Content installed");
	DeleteFile(SUPPORTDIR^"iiswebserverstatic.xml");
	RunApplication(SUPPORTDIR ^"IIS7Checkstatic.bat","\""+SUPPORTDIR^"iiswebserverstatic.xml"+"\"",FALSE,TRUE);
	svIIS7aspnet = ""; 
	svIIS7aspnet = ReadString(SUPPORTDIR,"iiswebserverstatic.xml",FALSE);
	if(StrLength(svIIS7aspnet)<1)then 
		WriteLogFile("iiswebserverstatic xml empty!");
		return 0;
	endif; 
	svIIS7aspnetrole ="<RoleService DisplayName=\"Static Content\" Installed=\"true\"";
	nindex = StrFind( svIIS7aspnet,svIIS7aspnetrole);	
	if(nindex<0)then
		return 1;
	endif; 
	svIIS7aspnetrole ="<RoleService DisplayName=\"Default Document\" Installed=\"true\"";
	nindex = StrFind( svIIS7aspnet,svIIS7aspnetrole);	
	if(nindex<0)then
		return 1;
	endif; 
	svIIS7aspnetrole ="<RoleService DisplayName=\"Directory Browsing\" Installed=\"true\"";
	nindex = StrFind( svIIS7aspnet,svIIS7aspnetrole);	
	if(nindex<0)then
		return 1;
	endif;	
	//<RoleService DisplayName="Static Content" Installed="true" Id="Web-Static-Content" Default="true" />
    //<RoleService DisplayName="Default Document" Installed="true" Id="Web-Default-Doc" Default="true" />
    //<RoleService DisplayName="Directory Browsing" Installed="true" Id="Web-Dir-Browsing" Default="true" />
            
	return 0 ;
end;

function CheckIIS7NeedAspnet()
STRING svIIS7aspnet,svIIS7aspnetrole; 
number nindex;
begin 
	WriteLogFile("check whether iiswebserver aspnet installed");
	DeleteFile(SUPPORTDIR^"iiswebserveraspnet.xml");
	RunApplication(SUPPORTDIR ^"IIS7CheckASPNET.bat","\""+SUPPORTDIR^"iiswebserveraspnet.xml"+"\"",FALSE,TRUE);
	svIIS7aspnet = ""; 
	svIIS7aspnet = ReadString(SUPPORTDIR,"iiswebserveraspnet.xml",FALSE);
	if(StrLength(svIIS7aspnet)<1)then 
		WriteLogFile("iiswebserveraspnet xml empty!");
		return 0;
	endif; 
	svIIS7aspnetrole ="<RoleService DisplayName=\"Application Development\" Installed=\"true\"";
	nindex = StrFind( svIIS7aspnet,svIIS7aspnetrole);	
	if(nindex<0)then
		return 1;
	endif; 
	svIIS7aspnetrole ="<RoleService DisplayName=\"ASP.NET\" Installed=\"true\"";
	nindex = StrFind( svIIS7aspnet,svIIS7aspnetrole);	
	if(nindex<0)then
		return 1;
	endif; 	 
	return 0 ;
end;

function CreateHomeShortCut()
begin      
	WriteLogFile("create short cut :home page");
	RunApplication("cscript.exe","\""+SUPPORTDIR ^"lk.vbs\" \""+FOLDER_PROGRAMS^"NetBrain\\Enterprise Server 4.1\" http://"+svDefaultSiteIP+":"+svDefaultSitePort+"/netbrain",FALSE,TRUE);
end;

function ReplaceHomeShortCutOnFinished()
begin
	ReplaceLineOfFile( FALSE, INSTALLDIR ^ "Enterprise Server\\", "home.url", "URL=http://localhost/netbrain", "URL=http://"+svDefaultSiteIP+":"+svDefaultSitePort+"/netbrain" );	
end;

function GetIIS7Configs() 
STRING szConfigs;   
STRING szConfigBindings;   
NUMBER nindex,nindex1;
NUMBER nFileHandletmp,nResult; 
begin   
	szConfigs = ""; 
	RunApplication(SUPPORTDIR ^"IIS7Getconfigs.bat",SUPPORTDIR ^"defaultsiteconfig.txt",FALSE,TRUE);	
	szConfigs = ReadString(SUPPORTDIR,"defaultsiteconfig.txt",TRUE);
	if(StrLength(szConfigs)<1)then
		return 0;
	endif; 
	//default web name
	nindex = StrFind( szConfigs,"\"");	
	if(nindex<0)then
		return 0;
	endif;
	nindex1 = StrFindEx(szConfigs,"\"",nindex+1);
	if(nindex1<0)then
		return 0;
	endif;
	StrSub( svDefaultSiteName,szConfigs,nindex+1,nindex1-nindex-1);
	//ip port
	nindex = StrFind(szConfigs,"http/");
	nindex1= StrFindEx(szConfigs,":",nindex+1);
	nindex1= StrFindEx(szConfigs,":",nindex1+1); 	
	if(nindex>0)&& (nindex1>nindex)then
	    StrSub( szConfigBindings,szConfigs,nindex+5,nindex1-nindex+1-5);
		DeleteFile(SUPPORTDIR ^"defaultsiteipport.txt"); 
		OpenFileMode (FILE_MODE_APPEND);   
 		nResult = CreateFile(nFileHandletmp,SUPPORTDIR, "defaultsiteipport.txt" );   
 		if( nResult < 0 ) then 
 		  	return 0; 
        endif;         
        //写入字符串   
        nResult = WriteLine(nFileHandletmp,"\""+szConfigBindings+"\"");   
        nResult = WriteLine(nFileHandletmp,"\""+szConfigBindings+"\"");     
        CloseFile(nFileHandletmp);		
	else
		return 0;
	endif;	
end;

function GetDefaultSiteIPPort()  
STRING szDefaultSite;
int nindex,nindex1; 
begin
	DeleteFile(SUPPORTDIR ^"defaultsiteipport.txt");
	RunApplication(SUPPORTDIR ^"getdefaultsiteipport.bat",SUPPORTDIR ^"defaultsiteipport.txt",FALSE,TRUE);
	//DeleteFile(SUPPORTDIR ^"defaultsiteipport.txt");
	if(svOSVer!="win03")then
		GetIIS7Configs();
	endif;
	
	szDefaultSite = ReadString(SUPPORTDIR,"defaultsiteipport.txt",FALSE);
	StrTrim (szDefaultSite);	  
	nindex = StrFind( szDefaultSite,"\r\n");
	if(nindex>-1)then	
		StrSub(szDefaultSite,szDefaultSite,nindex+2,StrLength(szDefaultSite));
		StrTrim (szDefaultSite);
	else
		return 0; 
	endif;
	nindex = StrFind( szDefaultSite,"\r\n");
	if(nindex>-1)then
		StrSub(szDefaultSite,szDefaultSite,0,nindex); 
		StrTrim (szDefaultSite);
	else
		return 0;
	endif;  
	//ip
	nindex = StrFind(szDefaultSite,":");	 
	nindex1 = StrFindEx(szDefaultSite,":",nindex+1);
	if(nindex>5)&&(nindex1>0)then
		StrSub(svDefaultSiteIP,szDefaultSite,1,nindex-1);	
	endif; 
	//port
	if(nindex1<0)||(nindex<0)then
		return 0;
	else 
		StrSub(svDefaultSitePort,szDefaultSite,nindex+1,nindex1-nindex-1);	
	endif;
	//MessageBox(szDefaultSite,WARNING);	
	//return 1; 
end;   

function STRING GetTestDefaultSiteReturnCode() 
STRING szUrlReturnCode;
NUMBER nReturnCode;
begin    
	DeleteFile(SUPPORTDIR ^"urlreturncode.txt");      
	//MessageBox("http://"+svDefaultSiteIP+":"+svDefaultSitePort +" \""+SUPPORTDIR ^"urlreturncode.txt\"",WARNING);	
	RunApplication(SUPPORTDIR ^"GetUrlReturnCode.bat" ,"http://"+svDefaultSiteIP+":"+svDefaultSitePort +" \""+SUPPORTDIR ^"urlreturncode.txt\"",FALSE,TRUE);
	szUrlReturnCode = ReadString(SUPPORTDIR,"urlreturncode.txt",FALSE);
	StrTrim(szUrlReturnCode);
	StrToNum ( nReturnCode, szUrlReturnCode );      
	if(nReturnCode==200 )then
		return  szUrlReturnCode;
	else 
		if StrLength(szUrlReturnCode)<1 then 
			szUrlReturnCode	="0";
		endif;                                                                                                             
		WriteLogFile("Error at http://"+svDefaultSiteIP+":"+svDefaultSitePort+" return code:"+szUrlReturnCode);
		MessageBox("Error at http://"+svDefaultSiteIP+":"+svDefaultSitePort+" return code:"+szUrlReturnCode,WARNING);
	endif;                
	return 	szUrlReturnCode ; 
end; 

function NUMBER GetTestNetbrainReturnCode() 
STRING szUrlReturnCode;
NUMBER nReturnCode;
begin    
	DeleteFile(SUPPORTDIR ^"urlreturncode.txt");      
	//MessageBox("http://"+svDefaultSiteIP+":"+svDefaultSitePort +" \""+SUPPORTDIR ^"urlreturncode.txt\"",WARNING);	
	RunApplication(SUPPORTDIR ^"GetUrlReturnCode.bat" ,"http://"+svDefaultSiteIP+":"+svDefaultSitePort +"/netbrain \""+SUPPORTDIR ^"urlreturncode.txt\"",FALSE,TRUE);
	szUrlReturnCode = ReadString(SUPPORTDIR,"urlreturncode.txt",FALSE);
	StrTrim(szUrlReturnCode);
	StrToNum ( nReturnCode, szUrlReturnCode );      
	if(nReturnCode==200 )then
		return  nReturnCode;
	else 
		if StrLength(szUrlReturnCode)<1 then 
			szUrlReturnCode	="0"; 
			nReturnCode=0;
		endif;		                                                                                                            
		WriteLogFile("Error at http://"+svDefaultSiteIP+":"+svDefaultSitePort+"/netbrain return code:"+szUrlReturnCode);
		//MessageBox("Error at http://"+svDefaultSiteIP+":"+svDefaultSitePort+" return code:"+szUrlReturnCode,WARNING);
	endif;                
	return 	nReturnCode ; 
end;

function CheckCurrentRight(sDirRight) 
STRING szUserName,szNoRightsDir; 
NUMBER nResult;
begin
	   RunApplication(SUPPORTDIR ^"c_username.bat",SUPPORTDIR ^"ccname.txt",FALSE,TRUE);
	   szUserName = ReadString(SUPPORTDIR,"ccname.txt",TRUE);
	   StrTrim (szUserName);   
	   nResult = ReplaceLineOfFile( FALSE, SUPPORTDIR , "checkcurusersright.bat", "\Users", "echo %%i|find \""+szUserName+"\">nul&&set baohan=true" );
	   RunApplication(SUPPORTDIR ^"c_checkcurusersright.bat",""+sDirRight+" \""+SUPPORTDIR ^"cccheckright.txt\"",FALSE,TRUE);
	   szNoRightsDir= ReadString(SUPPORTDIR,"cccheckright.txt",FALSE);
	   StrTrim (szNoRightsDir);   
	   if(szNoRightsDir!="")then   		
	   		WriteLogFile( "Messagebox add Full Control permissions" );
	   		MessageBox("Please add Full Control permissions of the following file folder to current user.\r\n"+szNoRightsDir, WARNING);	
	   endif;
end;

function STRING ReadString(sStringDir ,sStringFile,bonlyline) 
	STRING  svLine;
	STRING  svResult;   
    NUMBER   nFileHandle;  
    NUMBER   nResult;    
    NUMBER   nvResult;  
begin           
	nResult = FindFile ( sStringDir,  sStringFile, svResult ); 
	if(0>nResult) then
		return "";
	endif;
	if (bonlyline==TRUE) then 
		OpenFileMode (FILE_MODE_NORMAL);    
	else
		OpenFileMode (FILE_MODE_BINARYREADONLY);
	endif;
	if(0>OpenFile(nFileHandle,sStringDir,sStringFile)) then
		return "";                                                   		
	endif;     
	if (bonlyline==TRUE) then  
	    if (GetLine (nFileHandle, svLine) != 0)  then 
            svLine= "";    
        endif;
    else  
    	GetFileInfo ( sStringDir + sStringFile, FILE_SIZE, nvResult, svResult ); 
    	if (ReadBytes (nFileHandle, svLine, 0, nvResult) < 0) then 
        	svLine= "";
    	endif;
	endif;    
    CloseFile (nFileHandle);    
    return svLine;
end;  

function StrIsNums( svStr )
	NUMBER iLength, iVal; 
begin
	iVal = 0;
	iLength = StrLength (svStr); 
	while (iVal < iLength) 
		if(  svStr[iVal] < '0' ||  svStr[iVal] > '9' ) then
			return -1;                                                  
		endif;
		iVal++; 
	endwhile;   
	return 0;
end;

function  RunApplication( cmd , param, bShow, bWait )
    number nShowWindow;
    number nOptions;
begin                 
	nShowWindow = SW_NORMAL;
	nOptions = LAAW_OPTION_CHANGEDIRECTORY | LAAW_OPTION_FIXUP_PROGRAM;
	if( bShow = FALSE ) then 
		nShowWindow = SW_HIDE; 
		nOptions |= LAAW_OPTION_HIDDEN;
	endif;     
	
	if( bWait = TRUE ) then 
		nOptions |= LAAW_OPTION_WAIT; 
	else                           
		nOptions |= LAAW_OPTION_NOWAIT; 
	endif;
	
	LaunchApplication( cmd, param, "", nShowWindow, INFINITE, nOptions  );  
	return LAAW_PARAMETERS.nLaunchResult;
end;   

function DeleteLogFile() 
	NUMBER nvRet;
begin
    nvRet = DeleteFile ( LOGFILE_PATH + LOGFILE_NAME );
    if( nvRet = 0 || nvRet = ISERR_FILE_NOT_FOUND  ) then 
    	return 0;
    else 
    	return -1;
    endif;
end;


function WriteLogFile( svContent )   
 	NUMBER   FileHandle;   
	NUMBER   nResult;
	STRING	 svResult;
begin           
	nResult = FindFile ( LOGFILE_PATH,  LOGFILE_NAME, svResult ); 
	
	OpenFileMode (FILE_MODE_APPEND);  
	if( nResult < 0 ) then
		nResult = CreateFile(FileHandle, LOGFILE_PATH,  LOGFILE_NAME );  
	else
		nResult = OpenFile(FileHandle, LOGFILE_PATH,  LOGFILE_NAME );  
	endif;
	
	if( nResult < 0 ) then  
		return -1;
	endif; 
	//时间戳  
	nResult = WriteLine(FileHandle,"");
	nResult = WriteLine(FileHandle,RecordTimeLog());
    //写入字符串   
    nResult = WriteLine(FileHandle,svContent);     
    CloseFile(FileHandle);    
    return 0;
end;


function  WriteoneFile(svPath, svFileName, svContent)   
    NUMBER   nvResult;   
    NUMBER   FileHandle;   
    NUMBER   nResult;   
begin                       
    //Administrator
    if(SYSINFO.WINNT.bAdmin_Logged_On) then
    	DeleteFile ( svPath + svFileName );
    	
    	OpenFileMode (FILE_MODE_APPEND);   
 		nResult = CreateFile(FileHandle,svPath, svFileName );   
 		if( nResult < 0 ) then 
 		  	MessageBox ("CreateFile failed.", SEVERE);
          	abort;  
         endif;
        
        //写入字符串   
        nResult = WriteLine(FileHandle,svContent);     
        CloseFile(FileHandle);
    endif;   
 end; 
     
// 写入连接字符串到文件中
function WriteConnectFile( svContent )
	STRING	 svResult;  
    NUMBER   nResult;   
    NUMBER   nFileHandle;    
begin           
	nResult = FindFile ( LOGFILE_PATH,  CONNECTFILE_SRC_NAME, svResult ); 
	//todo
	OpenFileMode (FILE_MODE_APPEND);
	//OpenFileMode (FILE_MODE_BINARY);  
	if( nResult >= 0 ) then
		DeleteFile(LOGFILE_PATH+CONNECTFILE_SRC_NAME);
	endif;
	
	nResult = CreateFile(nFileHandle, LOGFILE_PATH,  CONNECTFILE_SRC_NAME ); 
	
	if( nResult < 0 ) then  
		return -1;
	endif;
	
    //todo 写入字符串   
    nResult = WriteLine(nFileHandle,svContent);
	//nResult = WriteBytes(nFileHandle,svContent,0,StrLength(svContent));      
    CloseFile(nFileHandle);  
    
	if( nResult < 0 ) then 
		return -1;
	endif;
	  
    return 0;
end;  

//从文件中读取连接字符串
function STRING ReadConnectFile() 
	STRING  svLine;
	STRING  svResult;   
    NUMBER   nFileHandle;  
    NUMBER   nResult;  
begin           
	nResult = FindFile ( LOGFILE_PATH,  CONNECTFILE_DES_NAME, svResult ); 
	if(0>nResult) then
		return "";
	endif;
	OpenFileMode (FILE_MODE_NORMAL);
	if(0>OpenFile(nFileHandle,LOGFILE_PATH,CONNECTFILE_DES_NAME)) then
		return "";                                                   		
	endif;
	if (GetLine (nFileHandle, svLine) != 0)  then 
        svLine= "";    
    endif;    
    CloseFile (nFileHandle);    
    return svLine;
end;
//写入 加密 读取
function STRING GetEncyptConnStr(svContent)
STRING svLine;
NUMBER nResult;
begin
	  if(0>WriteConnectFile(svContent)) then 
	  		WriteLogFile(MSG_ERR_CONNFILE_WRITE);
	   		return "";
	   endif;
	    
	   nResult = RunApplication( SUPPORTDIR ^ "EncryptFile.exe"," "+LOGFILE_PATH+CONNECTFILE_SRC_NAME+" "+LOGFILE_PATH+CONNECTFILE_DES_NAME,FALSE,TRUE);
	   if(nResult<0) then 
	  		WriteLogFile(MSG_ERR_ENCRYPT_CONNSTR);
	   		return "";        
	   endif;	
	   svLine= ReadConnectFile();
	   
	   DeleteFile ( LOGFILE_PATH + CONNECTFILE_SRC_NAME );
       DeleteFile ( LOGFILE_PATH + CONNECTFILE_DES_NAME );
       
	   return svLine;
end;

function ReplaceContentOfFile( FilePath, FileName, sOldStr, sNewStr )
    STRING svResult, szAttributes; 
    NUMBER nvResult; 
    STRING svString; 
    NUMBER nvFileHandle; 
begin      
    OpenFileMode (FILE_MODE_BINARY); 
    if (OpenFile (nvFileHandle, FilePath, FileName) < 0) then 
        return 1;
    endif;  
        
    GetFileInfo ( FilePath + FileName, FILE_SIZE, nvResult, svResult ); 

    // Read the next twenty-eight bytes into svString. 
    if (ReadBytes (nvFileHandle, svString, 0, nvResult) < 0) then 
        return 1;
    endif; 
    CloseFile (nvFileHandle); 
    
    DeleteFile(FilePath + FileName );
          
	OpenFileMode (FILE_MODE_BINARY);           
    if (CreateFile(nvFileHandle, FilePath, FileName) < 0) then 
        return 1;
    endif;   
    
    StrReplace( svString, sOldStr, sNewStr, 0 );  
    if( WriteBytes( nvFileHandle, svString, 0, StrLength(svString) ) < 0 ) then
    	return 1;
    endif;
    CloseFile (nvFileHandle); 
    return 0;
end;



function ReplaceLineOfFile( bIsUnicode, szPath, szFile, szKey, szContent )
    STRING  svReturnLine, szMsg, szInsertLine,svResultInsert;
    NUMBER  nvLineNUMBER, nvResult,nvFileHandle;
    NUMBER  nResult,nResultInsert;
begin
	if( bIsUnicode ) then 
		OpenFileMode(FILE_MODE_APPEND_UNICODE);
	else
    	OpenFileMode(FILE_MODE_APPEND);
    endif;
    nvResult = OpenFile(nvFileHandle, szPath, szFile );
    if(nvResult<0)then
    	WriteLogFile(szFile + " OpenFile() error.");
    endif;
    
    nvResult = FileGrep ( szPath + "\\" + szFile, szKey,svReturnLine, nvLineNUMBER, RESTART);
    szInsertLine = szContent;
    switch(nvResult)
        case 0:
        	nResultInsert = 0;
            nResultInsert = FileInsertLine (szPath + "\\" + szFile,szInsertLine,nvLineNUMBER, REPLACE);            
            if(nResultInsert<0)then  
            	NumToStr (svResultInsert, nResultInsert); 
    			WriteLogFile(szFile + " FileInsertLine() error:"+svResultInsert);
    		endif;    		
            CloseFile(nvFileHandle);
            return 0;
        case FILE_NOT_FOUND:   
        	WriteLogFile(  "ReplaceLineOfFile:" + szFile + " not found." );
        case FILE_LINE_LENGTH:
            // Report error; then abort.
			WriteLogFile(  "ReplaceLineOfFile:" + szFile + " lines too long." );
        case OTHER_FAILURE:
            // Report error; then abort. 
            NumToStr (svResultInsert, nvResult);                               
            WriteLogFile(  "ReplaceLineOfFile:" + szFile + " Unknown failure on call to FileGrep."+svResultInsert );
        default:
            // Report error; then abort. 
            NumToStr (svResultInsert, nvResult);                               
            WriteLogFile(  "ReplaceLineOfFile:" + szFile + "Default unknown failure on call to FileGrep."+svResultInsert );
    endswitch;
        
    CloseFile(nvFileHandle);
    return 1;
end;

function AddOrReplaceLineOfFile( bIsUnicode, szPath, szFile, szKey,szKeyBefore, szContent )
    STRING  svReturnLine, szMsg, szInsertLine;
    NUMBER  nvLineNUMBER, nvResult,nvFileHandle,nvResultBefore;
    NUMBER  nResult;
begin
	if( bIsUnicode ) then 
		OpenFileMode(FILE_MODE_APPEND_UNICODE);
	else
    	OpenFileMode(FILE_MODE_APPEND);
    endif;
    OpenFile(nvFileHandle, szPath, szFile );
    nvResult = FileGrep ( szPath + "\\" + szFile, szKey,svReturnLine, nvLineNUMBER, RESTART);
    szInsertLine = szContent;
    switch(nvResult)
        case 0:
            FileInsertLine (szPath + "\\" + szFile,szInsertLine,nvLineNUMBER, REPLACE);
            CloseFile(nvFileHandle);
            return 0; 
        case END_OF_FILE:
        	 nvResultBefore = FileGrep ( szPath + "\\" + szFile, szKeyBefore,svReturnLine, nvLineNUMBER, RESTART);
             switch(nvResultBefore)
             	case 0:
            		FileInsertLine (szPath + "\\" + szFile,szInsertLine,nvLineNUMBER, BEFORE);
            		CloseFile(nvFileHandle);
            		return 0;
		        case FILE_NOT_FOUND:   
		        	WriteLogFile(  "ReplaceLineOfFile:" + szFile + " not found." );
		        case FILE_LINE_LENGTH:
					WriteLogFile(  "ReplaceLineOfFile:" + szFile + " lines too long." );
		        case OTHER_FAILURE:                               
		            WriteLogFile(  "ReplaceLineOfFile:" + szFile + " Unknown failure on call to FileGrep." );
		    endswitch;
        case FILE_NOT_FOUND:   
        	WriteLogFile(  "ReplaceLineOfFile:" + szFile + " not found." );
        case FILE_LINE_LENGTH:
            // Report error; then abort.
			WriteLogFile(  "ReplaceLineOfFile:" + szFile + " lines too long." );
        case OTHER_FAILURE:
            // Report error; then abort.                               
            WriteLogFile(  "ReplaceLineOfFile:" + szFile + " Unknown failure on call to FileGrep." );
    endswitch;
        
    CloseFile(nvFileHandle);
    return 1;
end;               

function BuildPgDBPWD( host, port, user, pwd)
	STRING ss1, ss2,filename;
	number nret;
begin  
	filename = SUPPORTDIR ^ "pwd.sql";
	nret = ReplaceContentOfFile( SUPPORTDIR , "pwd.sql", "pwdxxx", pwd);
	if( nret != 0 ) then  		
 		return -1;
	endif;
	ss1 = SUPPORTDIR ^ "PgSql3.exe";
	ss2 = "-exe \"" + SUPPORTDIR ^ "psql.exe\"" + " -pwd " +PGPWDDEFAULT + " -h " + host + " -p " + port + " -U " + user + " -f \"" + filename+"\"";
	return RunApplication( ss1,ss2, FALSE, TRUE );
end;

function BuildPgDB( host, port, user, pwd, filename)
	STRING ss1, ss2;
begin
	ss1 = SUPPORTDIR ^ "PgSql3.exe";
	ss2 = "-exe \"" + SUPPORTDIR ^ "psql.exe\"" + " -pwd " + pwd + " -h " + host + " -p " + port + " -U " + user + " -f " + filename;
	WriteLogFile(ss1+ss2);
	return RunApplication( ss1,ss2, FALSE, TRUE );
end;

/////////////////////////   

function InputPostgresInfo()
	STRING szTitle,szMsg,szDriver,szNetstat;
	NUMBER nResult;    
	STRING svResult;
	NUMBER nvPortVal;	
begin
InputPostgresInfo_Start:
 	szTitle = "";
 	szMsg   = "";
 	svDBUserName  ="postgres";
 	
 	
 	nResult = SdShowDlgEdit3 ( szTitle, szMsg,"Port:","Username:" ,"Password:",svDBPort,svDBUserName, svDBPwd);  
 	if (nResult = BACK) then
  		return 0;
 	endif;
    

                
	if( StrFind (svDBPwd, ">") >= 0 
	|| StrFind (svDBPwd, "<") >= 0 
	|| StrFind (svDBPwd, "&") >= 0 
	|| StrFind (svDBPwd, "\'") >= 0 
	|| StrFind (svDBPwd, "\"") >= 0 
	|| StrFind (svDBPwd, ";") >= 0  
		) then         
		WriteLogFile( MSG_ERR_PGINFO_INVALID_CHAR );
    	MessageBox(MSG_ERR_PGINFO_INVALID_CHAR,WARNING);
     	goto InputPostgresInfo_Start;
	endif;
    
    if(StrFind (svDBPwd, " ") >= 0)then 
    	WriteLogFile( MSG_ERR_PGINFO_INVALID_CHAR_SPACE );
    	MessageBox(MSG_ERR_PGINFO_INVALID_CHAR_SPACE,WARNING);
     	goto InputPostgresInfo_Start;
    endif;
    
    if(svDBUserName ="" || svDBPwd ="" || svDBPort="") then
    	WriteLogFile( MSG_ERR_PGINFO_EMPTY );
    	MessageBox(MSG_ERR_PGINFO_EMPTY, WARNING);
     	goto InputPostgresInfo_Start;
    endif;   
    
    if( StrIsNums(  svDBPort ) != 0 ) then
    	WriteLogFile( MSG_ERR_PGINFO_PORT_DIGIT );
    	MessageBox(MSG_ERR_PGINFO_PORT_DIGIT, WARNING);
     	goto InputPostgresInfo_Start;
    endif;
    
    if( StrToNum(nvPortVal, svDBPort) < 0 ) then
    	WriteLogFile( MSG_ERR_PGINFO_PORT_CONVERT );
    	MessageBox(MSG_ERR_PGINFO_PORT_CONVERT, WARNING);
     	goto InputPostgresInfo_Start;
    endif; 
    
    if( nvPortVal > 65535 || nvPortVal < 100 ) then
    	WriteLogFile( MSG_ERR_PGINFO_PORT_RANGE );
    	MessageBox(MSG_ERR_PGINFO_PORT_RANGE, WARNING);
     	goto InputPostgresInfo_Start;
    endif;    
    
    NumToStr( svDBPort, nvPortVal );
    
    if( StrLength( svDBPwd ) > 12 || StrLength( svDBPwd ) < 6 ) then
    	WriteLogFile( MSG_ERR_PGINFO_PWD_LEN );
    	MessageBox(MSG_ERR_PGINFO_PWD_LEN, WARNING);
     	goto InputPostgresInfo_Start;
    endif;  
    
	RunApplication( SystemFolder ^ "cscript.exe", "\"" + SUPPORTDIR ^ "portcheck.vbs\" " + svDBPort + " "+LOGFILE_PATH + "netstat.txt", FALSE, TRUE );
    //RunApplication( SUPPORTDIR ^ "portcheck.bat", svDBPort , FALSE, TRUE );
    nResult = LAAW_PARAMETERS.nLaunchResult;  
    szNetstat = ReadString(LOGFILE_PATH, "netstat.txt",FALSE);
    WriteLogFile(szNetstat);
    if (nResult=0) then 
    	Sprintf ( svResult, MSG_ERR_PGINFO_PORT_INVALID, svDBPort); 
    	WriteLogFile( svResult );
    	MessageBox(svResult,WARNING);
    	goto InputPostgresInfo_Start;
    endif;//LOGFILE_PATH = "c:\\";  
    WriteLogFile(MSG_INFO_STEP_NETSTAT);
    
    WriteoneFile( LOGFILE_PATH, "postgrespasswd.txt", svDBPwd);
	svPassworDir = LOGFILE_PATH+"postgrespasswd.txt";   
	
	
	svPGPassWord=svDBPwd; 
	svDBPort=svDBPort; 
	return 1; 
	
end;  
 
function InputPostgresDbDataDir() 
	string svDir,szTitle,szMsg, svFileName;
	number nResult; 
	number iResult;
	LIST   listDirs; 
	STRING svDirtemp;
begin  
Dlg_SdAskDestPath:
	svDir = svPostgreDbDataDir;
	szTitle = "Choose Destination Location \n"+"  "+"Select folder where Setup will install database data.";
    szMsg   = "Setup will install Database in the following folder.\n\nTo install to a different folder, click Browse and select another folder. The folder must be empty, and you cannot select the root directory of Enterprise Server installation.";
    nResult = SdAskDestPath ( szTitle, szMsg, svDir, 0 );     
    if (nResult = BACK) then
  		return 0;
  	endif;
    
  	StrRemoveLastSlash (svDir);
  	nResult = FindAllFiles( svDir, "*.*", svFileName, RESET ); 
  	if( nResult == 0 ) then   
  		MessageBox(  MSG_ERR_PGINFO_DATADIR_EMPTY, SEVERE);
  		goto Dlg_SdAskDestPath;
  	endif;
  	
  	listDirs = ListCreate (STRINGLIST);
    nResult = FindAllDirs( svDir, INCLUDE_SUBDIR, listDirs); 
  	if( nResult == 0 && ListCount( listDirs ) > 0 ) then   
  		MessageBox(  MSG_ERR_PGINFO_DATADIR_EMPTY, SEVERE);
  		goto Dlg_SdAskDestPath;
  	endif;
	  
  	//if disk root 
  	svDirtemp = svDir;
  	StrReplace ( svDirtemp, "\\", " ", 0 );
  	StrTrim (svDirtemp);
  	if( StrLength(svDirtemp)==2) then  
  	    MessageBox(  MSG_ERR_PGINFO_DATADIR_DISKROOT, SEVERE);
  		goto Dlg_SdAskDestPath;
  	endif;
  	
   	svDir = svDir+"\\";
    svPostgreDbDataDir = svDir;
    return 1;
end;
          

function PostgresInstall1()
	NUMBER  nResult;  
	string  svTest;
	
begin              
	return RunApplication( SUPPORTDIR ^ "c_PostgresInstall1.bat",   "\"" + INSTALLDIR^"Postgresql 8.4\" \"" + LOGFILE_PATH + LOGFILE_NAME + "\" " + svDBUserName + " \"" + svPassworDir + "\" \"" + svPostgreDbDataDir + "\" " + svDBPort,  FALSE, TRUE );	
end;

function PostgresInstall2()
	NUMBER  nResult;  
	string  svTest;
	
begin              
	return RunApplication( SUPPORTDIR ^ "c_PostgresInstall2.bat",  "\"" + INSTALLDIR^"Postgresql 8.4\" \"" + svPostgreDbDataDir + "\" \"" + LOGFILE_PATH + LOGFILE_NAME + "\"",  FALSE, TRUE );	
end;


function PostgresUninstall()
begin 
	//停止PostgreSQL Database Server 8.4 for NetBrain服务,并删除该服务
	return RunApplication( SUPPORTDIR ^ "c_PostgresUninstall.bat", "\"" + INSTALLDIR^"Postgresql 8.4\" \"" + LOGFILE_PATH + LOGFILE_NAME + "\"",  FALSE, TRUE );	
end;           



///////////////////////////////////////////////////////////////////////////////
function BSInstall()
    STRING  svReturnLine, szMsg, szInsertLine;
    NUMBER  nvLineNUMBER, nvResult,nvFileHandle;
    NUMBER  nResult;
    NUMBER nvSize,nvType;
begin
    nResult = RunApplication(INSTALLDIR ^ "Enterprise Server\\WebServer\\bin\\NBBS.exe","-remove",FALSE, TRUE);
    nResult = RunApplication(INSTALLDIR ^ "Enterprise Server\\WebServer\\bin\\NBBS.exe","-install",FALSE, TRUE);
    nResult = RunApplication( SystemFolder ^ "net.exe", "start \"Netbrain Benchmark Schedule\"",FALSE, TRUE);	
end;       

function BSUninstall()
begin 
	RunApplication( SystemFolder ^ "net.exe", "stop \"Netbrain Benchmark Schedule\"",FALSE, TRUE);	  
	RunApplication(INSTALLDIR ^ "Enterprise Server\\WebServer\\bin\\NBBS.exe","-Remove",FALSE, TRUE);
	LaunchAppAndWait( "taskkill" , "/F /IM NBBS.exe",WAIT|LAAW_OPTION_HIDDEN);   //Bug 43544
end;


///////////////////////////////////////////////////////////////////////////////
function EAPInstall()
	NUMBER nResult, nRet;
	STRING svPath,svResult;
	STRING svConnectionGraphics,svConnectionWeb;   
begin 
	nRet = 0;

    nResult = RunApplication( SUPPORTDIR ^ "c_Buildpgdb.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\" " + PGHOSTDEFAULT + " " + svDBPort + " " + svDBUserName + " " + PGPWDDEFAULT, FALSE, TRUE);
	if( nResult != 0 ) then
 		nRet = -1;  
 		WriteLogFile( MSG_ERR_BUILD_PDDB );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_BUILD_PDDB );

	/*	          
    BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "testconn.sql\"" );
 	WriteLogFile("testnbwsconn");
    Delay(20);//等待20s 
    
	if( nvInstallDataDir = 1 )  then  
		nResult = BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws3.sql\"" );
 	 	if( nResult != 0 ) then
 	 		WriteLogFile( MSG_ERR_EXE_SQL_WS3 );
 	 	endif;                                           
 	 	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WS3 );
  	endif;
  	nResult = BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws3-1.sql\"" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_EXE_SQL_WS3_1 );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WS3_1 );

	nResult = BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws3-2.sql\"" );
	if( nResult != 0 ) then 
 		WriteLogFile( MSG_ERR_EXE_SQL_WS3_2 );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WS3_2 );
	    
	nResult =  BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws3-2-2.sql\"" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_EXE_SQL_WS3_2_2 );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WS3_2_2 );	
	    
	nResult =  BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws3-3.sql\"" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_EXE_SQL_WS3_3 );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WS3_3 );  
		    
	nResult =  BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws3-4.sql\"" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_EXE_SQL_WS3_4 );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WS3_4 );
			    
	nResult =  BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws311.sql\"" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_EXE_SQL_WS311 );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WS311 );  
 
   	nResult =  BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws31c.sql\"" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_EXE_SQL_WS31c );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WS31c ); 
	 	
  	nResult =  BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws3.2.sql\"" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_EXE_SQL_WS32 );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WS32 );     
	
	nResult =  BuildPgDB( PGHOSTDEFAULT, svDBPort, svDBUserName, PGPWDDEFAULT,  "\""+SUPPORTDIR ^ "ws_vm.sql\"" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_EXE_SQL_WSVM );
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_EXE_SQL_WSVM );
		

  	nResult = BuildPgDBPWD(PGHOSTDEFAULT, svDBPort, svDBUserName, svDBPwd);
	if( nResult != 0 ) then
 	 	WriteLogFile( MSG_ERR_MODIFYPGPWD );
 	endif; 
 	WriteLogFile(MSG_INFO_SETP_MODIFYPGPWD);    
 	*/
 	                 
  	svConnectionGraphics ="Provider=PostgreSQL OLE DB Provider;Password="+svDBPwd+";User ID="+svDBUserName+ ";Data Source=127.0.0.1:"+ svDBPort +";Location=nbws;";
  	   	
  	svConnectionGraphics=GetEncyptConnStr(svConnectionGraphics);
  	
  	nResult = ReplaceLineOfFile( FALSE, INSTALLDIR ^ "Enterprise Server\\WebServer\\Conf\\", "fix_Graphics.ini", "CONNStr=", "CONNStr=\""+svConnectionGraphics+"\"" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_CONF_FIX_GRAPHICS );
 		nRet = -1;
	endif;
	nResult = AddOrReplaceLineOfFile( FALSE, INSTALLDIR ^ "Enterprise Server\\WebServer\\Conf\\", "fix_Graphics.ini", "CONNStrEn=", "CONNStr=", "CONNStrEn=1" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_CONF_FIX_GRAPHICS );
 		nRet = -1;
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_CONF_FIX_GRAPHICS );

    svConnectionWeb="server=127.0.0.1" + ";port=" + svDBPort + ";user id=" + svDBUserName + ";password=" + svDBPwd + ";database=nbws;commandtimeout=600;"; 
  	
  	svConnectionWeb=GetEncyptConnStr(svConnectionWeb);
  	
  	nResult = ReplaceLineOfFile( TRUE, INSTALLDIR ^ "Enterprise Server\\WebServer\\", "web.config", "<dbConn connectionStr=", "<dbConn connectionStr=\"" + svConnectionWeb + "\" dll=\"Npgsql\" type=\"Npgsql.NpgsqlConnection\" CONNStrEn=\"1\"/>" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_CONF_WEB_CONFIG );
 		nRet = -1;
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_CONF_WEB_CONFIG );

    nResult = ReplaceContentOfFile( INSTALLDIR ^ "Enterprise Server\\WebServer\\Conf\\", "fix_log.property", "$(NB_ROOT)", INSTALLDIR ^ "Enterprise Server\\WebServer" );
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_CONF_FIX_LOG );
 		nRet = -1;
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_CONF_FIX_LOG );
    
    RebuildFlag();
    
    nResult = RunApplication( SUPPORTDIR ^ "c_InstallUser.bat", "\""+INSTALLDIR ^ "Enterprise Server\" \"" + LOGFILE_PATH + LOGFILE_NAME + "\"",FALSE, TRUE);
	if( nResult != 0 ) then
 		nRet = -1;
	endif;
	WriteLogFile( MSG_INFO_STEP_OUT_INSTALL_USER );
	
	nResult = RunApplication( SUPPORTDIR ^ "nbkf.exe","-a check -f " + "\""+SystemFolder^"nbl\\nb10002.ini\"" + " -s 321789 -p Nb(Info@E)S",FALSE, TRUE);
	if( nResult != 0 ) then
 		WriteLogFile( MSG_ERR_CONF_NBKF ); 
 		nRet = -1;
	endif;
   	WriteLogFile( MSG_INFO_STEP_OUT_INSTALL_NBKF );
       	 
   	if(CheckNeedInstallNetFx3()==1) then 
   	    WriteLogFile( MSG_ERR_NETFX35_NOTEXISTS );  
   	else
   	    WriteLogFile( MSG_NETFX35_EXISTS );  
   	endif;
   	
   	if (svOSVer=="win08") then
   		if(SYSINFO.WINNT.bWinVista_Server2008=TRUE) then
   		    RunApplication( SUPPORTDIR ^ "installaspnetiis7.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\" ServerManagerCmdvista.exe",FALSE, TRUE);	
   		else
   			RunApplication( SUPPORTDIR ^ "installaspnetiis7.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\" ServerManagerCmdr2.exe",FALSE, TRUE);	
   		endif;   		
   	endif;
   	//if(CheckAspnetState()==0)then  
   	//	RunApplication( SUPPORTDIR ^ "Installaspnet_regiis.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\"",FALSE, TRUE);	
   	//endif;
   	
    nResult = RunApplication( SUPPORTDIR ^ "c_InstallGW.bat", "\""+INSTALLDIR ^ "Enterprise Server\\WebServer\" \"" + LOGFILE_PATH + LOGFILE_NAME + "\" \"" +svOSVer+"\" \""+svDefaultSiteName+"\"",FALSE, TRUE);
	if( nResult != 0 ) then
 		nRet = -1;
	endif;
   	WriteLogFile( MSG_INFO_STEP_OUT_INSTALL_IIS );  
   	
   	nResult = RunApplication( SUPPORTDIR ^ "c_InstallGwIIS7Isapi.bat", "^%windir^% \"" + LOGFILE_PATH + LOGFILE_NAME + "\" \"" +svOSVer+"\"",FALSE, TRUE);
	if( nResult != 0 ) then
 		nRet = -1;
	endif;
   	WriteLogFile( MSG_INFO_STEP_OUT_INSTALL_IISISAPI ); 
   	
   	nResult = RunApplication( SUPPORTDIR ^ "RegAspStateStartKey.exe", "",FALSE, TRUE);
	WriteLogFile( MSG_INFO_STEP_OUT_REGKEY_START_ASPNET_STATE_CHECK );
	    
    nResult = RunApplication( SUPPORTDIR ^ "aspnetstateauto.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\"",FALSE, TRUE);
	if( nResult != 0 ) then 
		WriteLogFile( MSG_ERR_CONF_ASPNET_STATE );
 		//nRet = -1;
	endif;
   	WriteLogFile( MSG_INFO_STEP_OUT_ASPNET_STATE ); 
    
    //if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then    
    //	nResult = RegDBSetKeyValueEx("SYSTEM\\CurrentControlSet\\Services\\aspnet_state","Start",REGDB_NUMBER,"2",-1);
	//	if( nResult != 0 ) then
	// 		WriteLogFile( MSG_ERR_CONF_ASPNET_STATE );
	// 		nRet = -1;
	//	endif;
	//	WriteLogFile( MSG_INFO_STEP_OUT_ASPNET_STATE );
    //endif;
    
   	//reg clsid add network service
   	nResult = RunApplication( SUPPORTDIR ^ "RegCLSIDNetworkService.exe", "",FALSE, TRUE);
	if( nResult != 0 ) then 
		 WriteLogFile( MSG_ERR_ADDREGNETWORKSERVICE ); 
 		nRet = -1;
	endif;
   	WriteLogFile(MSG_INFO_STEP_OUT_ADDREGNETWORKSERVICE );
   	
   	return nRet;
end;                     

function EAPUninstall()   
	NUMBER nResult;
begin  
	if svOSVer=="win03" then
		return RunApplication(SUPPORTDIR ^ "c_Removevrdir.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\"",FALSE, TRUE);
	else
		GetIIS7Configs();  
	 	return RunApplication(SUPPORTDIR ^ "c_Removevrdiriis7.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\" \""+svDefaultSiteName+"\"",FALSE, TRUE);
	endif;
end;

//检查IIS是否安装
function CheckIIS()  
	//No STRING  
	STRING szValue;  
	NUMBER nvSize,nvType;
begin  
	RegDBSetDefaultRoot ( HKEY_LOCAL_MACHINE );  
	if (RegDBKeyExist ("System\\CurrentControlSet\\Services\\W3SVC" ) < 0 ) then  
		return (0);  
	endif;
 
 	nvType = REGDB_STRING;                                                             
 	if( RegDBGetKeyValueEx("System\\CurrentControlSet\\Services\\W3SVC","DisplayName",nvType,szValue,nvSize) < 0 ) then 
 		return (0) ;
 	endif;  
 	
	return (1);  
end;
 
function CheckAspnetState()
STRING szValue;  
	NUMBER nvSize,nvType,nvValue;
begin  
	RegDBSetDefaultRoot ( HKEY_LOCAL_MACHINE );  
	if (RegDBKeyExist ("System\\CurrentControlSet\\Services\\aspnet_state" ) < 0 ) then  
		return (0);  
	endif;
    
 	nvType = REGDB_NUMBER;                                                             
 	if( RegDBGetKeyValueEx("System\\CurrentControlSet\\Services\\aspnet_state","Start",nvType,szValue,nvSize) < 0 ) then 
 		return (0) ;
 	endif;  
 	
	return (1);  
end; 

function STRING GetTEMPDIRNAME()  
	number nret;  
	string  svResult1;
	string  svResult2;
	string  svResult3;
begin
	GetSystemInfo (DATE, nret, svResult1); 
	GetSystemInfo (TIME, nret, svResult2); 
	svResult3 = ".bak."+svResult1+svResult2;
	StrReplace ( svResult3, ":", "", 0 );
	return svResult3; 
end;

function CheckEAP2008()
	NUMBER nResult;
begin
   if((SYSINFO.WINNT.bWinVista_Server2008=TRUE) || (SYSINFO.WINNT.bWin7_Server2008R2=TRUE))&&(SYSINFO.nOSProductType!=VER_NT_WORKSTATION) then      
   		svOSVer="win08";
   		return (1);
   endif;
   return (0);     
end; 

function CheckNeedInstallNetFx3()  
	number nvType;
    number nvSize;
    string nvSP;
    number nResult;
begin    
	nvType = REGDB_NUMBER;
	nvSize = -1; 
	nvSP = "-1";    
 	if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
 		nResult = RegDBGetKeyValueEx( REGNETFX35, "SP",nvType,nvSP,nvSize); 
  		if(nResult < 0) then
  			return (1);
    	endif;
    endif;     
    if(nvSP=="1")  then
        return (0);
    endif; 
	return (1);
end;
//检查Gateway的安装条件：操作系统：Windows 2003 Server (IIS6.0)使用asp.net 版本为1.1.4322
function CheckEAP()
	NUMBER nResult;
	STRING szIISMSG;
begin 
	svOSVer="win03";
	 if(SYSINFO.WINNT.bWinServer2003=FALSE)&&(CheckEAP2008()=0) then 
     //不是Windows 2003 Server就不能安装，退出
     	SdShowMsg ("", FALSE);
     	MessageBox( MSG_ERR_NEED_2008SERVER, SEVERE);
     	WriteLogFile( MSG_ERR_NEED_2008SERVER );
   		return (0);
     endif;
       
   	 if (svOSVer=="win08") then
   		if(SYSINFO.WINNT.bWinVista_Server2008=TRUE) then
   		    RunApplication( SUPPORTDIR ^ "copyservermanagercmd.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\" ServerManagerCmdvista.exe",FALSE, TRUE);	
   		else
   			RunApplication( SUPPORTDIR ^ "copyservermanagercmd.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\" ServerManagerCmdr2.exe",FALSE, TRUE);	
   		endif;   		
   	 endif;
     //判断IIS是否安装,没有安装提示先安装IIS
  	 nResult = CheckIIS();
  	 if (nResult = 0) then
  	 	if (svOSVer=="win03") then
  	 		//MessageBox(MSG_ERR_NEED_IIS,SEVERE);
  	 		szIISMSG=  MSG_ERR_NEED_IIS; 
  	 		SdShowMsg ("", FALSE);
  	 		MyMSGDlg(szIISMSG);
  	 	else
  	 		//MessageBox(MSG_ERR_NEED_IIS2008,SEVERE); 
  	 		szIISMSG=  MSG_ERR_NEED_IIS2008; 
  	 		SdShowMsg ("", FALSE);
  	 		MyMSGDlg(szIISMSG);
  	 	endif;
  	 	WriteLogFile( MSG_ERR_NEED_IIS );
   		return (0);
   	 else   //检查iis common http feature
	 	if (svOSVer=="win08") then
	 	 	if(CheckIIS7FeaturesNeed()==1)then
	 	 		SdShowMsg ("", FALSE);
	 	 		MessageBox(MSG_ERR_NEED_IISCommon,SEVERE);
	 	 		return (0);
	 	 	endif;
	 	endif;	 
	 	return (1);
	 endif;   
   	    	 
end;
 
function GetSysInfo()     
begin 
	WriteLogFile( MSG_INFO_NETBRAINCHECKER );
	RunApplication( SUPPORTDIR ^ "NetbrainChecker.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\"",FALSE, TRUE);	
end; 

function CheckPathSpecChar(spathtocheck)
begin  
	//return (1);
	//#$%^&@~`!;',
	if(StrFind (spathtocheck, "#")>-1 ||StrFind (spathtocheck, "$")>-1 ||StrFind (spathtocheck, "%")>-1 ||StrFind (spathtocheck, "^")>-1 ||StrFind (spathtocheck, "&")>-1 ||StrFind (spathtocheck, "@")>-1||StrFind (spathtocheck, "~")>-1||StrFind (spathtocheck, "`")>-1||StrFind (spathtocheck, "!")>-1||StrFind (spathtocheck, ";")>-1||StrFind (spathtocheck, "'")>-1||StrFind (spathtocheck, ",")>-1)  then
		MessageBox("The Path can not include any of the following characters: #$%^&@~`!;', ", SEVERE);
		return (0);                            
	endif; 
	return (1);
end;  
        
function WriteRegistryWeb()
	NUMBER nvSize,nvType, nvReturn;
	STRING svTemp, svResult;
begin
	//把相关的信息写在注册表中，以方便以后使用
	nvType = REGDB_STRING; 
    nvSize = -1;  
    if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
    	RegDBSetKeyValueEx("SOFTWARE\\NetBrain\\NetBrain Enterprise Server\\WebServer","user",nvType,svUserName,nvSize);
   		RegDBSetKeyValueEx("SOFTWARE\\NetBrain\\NetBrain Enterprise Server\\WebServer","company",nvType,szCompany,nvSize);
   		RegDBSetKeyValueEx("SOFTWARE\\NetBrain\\NetBrain Enterprise Server\\WebServer","netbrainDir",nvType,INSTALLDIR,nvSize);
   		
   	   	GetSystemInfo( DATE, nvReturn, svResult );  
   		svTemp = svResult;
   		svTemp = svTemp + " ";
   		GetSystemInfo( TIME, nvReturn, svResult );
   		svTemp = svTemp + svResult;
   			
   		RegDBSetKeyValueEx("SOFTWARE\\NetBrain\\NetBrain Enterprise Server\\WebServer","InstallTime",nvType, svTemp ,nvSize);
    endif;
       
end;     


function IsSameLargeVersion() 
	NUMBER nResult;
	STRING svVer1, svVer2;  
	NUMBER nLocation;   
	NUMBER nVar1,nVar2;	
begin 
      WriteLogFile("IsSameLargeVersion begin "); 
      WriteLogFile("RegCurrentVersion: "+svCurrentVersion); 
      WriteLogFile("ProductCurrentVersion: "+IFX_PRODUCT_VERSION);
	  if(svCurrentVersion=="")then
	      nResult=0;
	      return nResult;
	  endif;
	  if(StrLength(IFX_PRODUCT_VERSION)<4) || (StrLength(svCurrentVersion) <4) then
	  	  nResult = 0;
	      return nResult;
	  endif;    
	  
	  nLocation = StrFind (IFX_PRODUCT_VERSION, "."); 	  
	  StrSub (svVer1,IFX_PRODUCT_VERSION,0,nLocation);	  	  
	   
	  nLocation = StrFind (svCurrentVersion, ".");		  
	  StrSub (svVer2,svCurrentVersion,0,nLocation);      
	  
	  WriteLogFile("IsSameLargeVersion:PRODUCT_VERSION "+svVer1+",CurrentVersion "+svVer2);
	  
	  StrToNum(nVar1,svVer1);
	  StrToNum(nVar2,svVer2);         
	  
	  if(nVar1==nVar2) then
	  		nResult = 1;
	  endif;
	  return nResult;
end;      

function IsSameLargeVersion2() 
	NUMBER nResult;
	STRING svVer1, svVer2;
begin 
      WriteLogFile("IsSameLargeVersion2 begin "); 
      WriteLogFile("RegCurrentVersion: "+svCurrentVersion); 
      WriteLogFile("ProductCurrentVersion: "+IFX_PRODUCT_VERSION);
	  if(svCurrentVersion=="")then
	      nResult=0;
	      return nResult;
	  endif;
	  if(StrLength(IFX_PRODUCT_VERSION)<4) || (StrLength(svCurrentVersion) <4) then
	  	  nResult = 0;
	      return nResult;
	  endif;
	  StrSub (svVer1,IFX_PRODUCT_VERSION,0,3);
	  StrSub (svVer2,svCurrentVersion,0,3);
	  
	  if(svVer1==svVer2) then
	  		nResult = 1;
	  endif;
	  return nResult;
end;        

function IsSameLargeVersion3() 
	NUMBER nResult;
begin  
	  nResult=0;
	  
      WriteLogFile("IsSameLargeVersion3 begin "); 
      WriteLogFile("RegCurrentVersion: "+svCurrentVersion); 
      WriteLogFile("ProductCurrentVersion: "+IFX_PRODUCT_VERSION);  
      
	  if(svCurrentVersion=="")then
	      nResult=0;
	      return nResult;
	  endif;
	  if(StrLength(IFX_PRODUCT_VERSION)<4) || (StrLength(svCurrentVersion) <4) then
	  	  nResult = 0;
	      return nResult;
	  endif;
	 	  
	  if(svCurrentVersion==IFX_PRODUCT_VERSION) then
	  		nResult = 1;
	  endif;
	  return nResult;
end; 


function OldVersionIsLess410() 
	NUMBER nResult;
	NUMBER nVer;
	STRING svVer1;
begin 
      WriteLogFile("OldVersionIsLess410 begin "); 
      WriteLogFile("RegCurrentVersion: "+svCurrentVersion); 
	  if(svCurrentVersion=="")then
	      nResult = 1;
	      return nResult;
	  endif;
	  if( StrLength(svCurrentVersion) < 5 ) then
	  	  nResult = 1;
	      return nResult;
	  endif;
	  StrSub (svVer1,svCurrentVersion,0,3);
	  
	  StrReplace(  svVer1, ".", "", 0 );   
	  StrToNum ( nVer, svVer1 ); 
	  if( nVer < 41  )  then
	  		nResult = 1;
	  endif;
	  return nResult;
end;

function WriteRegistryPostgres()
	NUMBER nvSize,nvType;  
	STRING nvStrData;
begin                 
	//把相关的信息写在注册表中，以方便以后使用
	nvType = REGDB_STRING; 
    nvSize = -1;  
    if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
   		RegDBSetKeyValueEx("SOFTWARE\\NetBrain","EAPPostgresDataUserName",nvType,svDBUserName,nvSize);
        RegDBSetKeyValueEx("SOFTWARE\\NetBrain","EAPPostgresDataPwd",nvType,svDBPwd,nvSize);
        RegDBSetKeyValueEx("SOFTWARE\\NetBrain","EAPPostgresDataPort",nvType,svDBPort,nvSize);
        RegDBSetKeyValueEx("SOFTWARE\\NetBrain","EAPPostgresDataDir",nvType,svPostgreDbDataDir,nvSize);
        if(IsSameLargeVersion3()==0)then  //Bug 43074 
        	RegDBSetKeyValueEx("SOFTWARE\\NetBrain","EAPDataSetupTime",nvType,svDataSetupTime,nvSize);
        endif;
        RegDBSetKeyValueEx("SOFTWARE\\NetBrain","EAPDataDirRoot",nvType,svDataDirRoot,nvSize);
        RegDBSetKeyValueEx("SOFTWARE\\NetBrain","EAPCurrentVersion",nvType,IFX_PRODUCT_VERSION,nvSize);
        
        if( nvInstallDataDir = 1 ) then
        	nvStrData="0";
        else 
        	nvStrData="1";
        endif;
        RegDBSetKeyValueEx("SOFTWARE\\NetBrain","EAPUpgrade",nvType, nvStrData ,nvSize);    
    endif;
    
    
       
end; 

         

function DeleteRegistryWeb()
//No STRING	
begin
	if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
    	RegDBDeleteKey ( "SOFTWARE\\NetBrain\\NetBrain Enterprise Server\\WebServer" );
 	endif;
end;


function DeleteRegistryPostgres()
//No STRING	
begin              
	if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
		RegDBDeleteValue( "SOFTWARE\\NetBrain","EAPPostgresDataDir" );
		RegDBDeleteValue( "SOFTWARE\\NetBrain","EAPPostgresDataUserName" );
		RegDBDeleteValue( "SOFTWARE\\NetBrain","EAPPostgresDataPwd" );
		RegDBDeleteValue( "SOFTWARE\\NetBrain","EAPPostgresDataPort" );
		RegDBDeleteValue( "SOFTWARE\\NetBrain","EAPDataSetupTime" );  
		RegDBDeleteValue( "SOFTWARE\\NetBrain","EAPDataDirRoot" );  
		RegDBDeleteValue( "SOFTWARE\\NetBrain","EAPCurrentVersion" );
 	endif;
end;      


//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnBegin
//
//  EVENT:      Begin event is always sent as the first event during installation.
//
//////////////////////////////////////////////////////////////////////////////
function OnBegin()
	
	//STRING svResult,szDir;
begin
	// TO DO: you may change default non-UI setting, for example
	//
	// You may also perform your custom initialization steps, check requirements, etc.  
//NUMBER nvDx , nvDy; 
	DialogSetInfo(DLG_INFO_ALTIMAGE, SUPPORTDIR ^ "setup_top.bmp", TRUE);    
	LOGFILE_PATH = "c:\\";
	StrSub (LOGFILE_PATH, WINDIR, 0, 3); 	
	svDefaultSiteIP="localhost";   
	svDefaultSitePort="80"; 
	svDefaultSiteName="Default Web Site";
	if( DeleteLogFile() != 0 ) then
		MessageBox( "Failed to delete the old log file:" + LOGFILE_PATH + LOGFILE_NAME, INFORMATION);
	endif;      
	//svDBPort  ="54321";	
	
	svLICHost="127.0.0.1";
	svLICSiteIndex=DEFAULTSITEINDEX;
	svLICSiteName=DEFAULTSITENAME; 
	svLICDBname="nbclic";  
	svPGUserName="postgres"; 
	svLICDBpwd="postgres"; 
	svPGPassWord="postgres";
	svLICAppPool="LICAppPool";   
	svLICVdir="LICVdir" ;
	svLICDisableFolderList="";
	
	svPGHost="127.0.0.1";  
	svDBPort="54321"; 
	svLICInstalldir=INSTALLDIR ^ "License Server";  
	
	svGWSiteIndex=DEFAULTSITEINDEX;
	svGWSiteName=DEFAULTSITENAME;
	svGWHost="127.0.0.1";
	svGWDBname="nbcgw";
	svGWDBpwd="postgres";
	svGWInstalldir=INSTALLDIR ^"GateWay Server";
	svGWAppPool="GWAppPool";
	svGWVdir="GWVdir";
	svGWDisableFolderList="";
	
	svWSPName="nbwsp100";
	svWSPDir=INSTALLDIR ^"WorkSpace Server"^svWSPName;
	
	LOGFILE=LOGFILE_PATH^LOGFILE_NAME; 
		
end;   




//////////////////////////////////////////////////////////////////////////////
//                                                                           
//  FUNCTION:   OnFirstUIBefore                                            
//                                                                           
//  EVENT:      FirstUIBefore event is sent when installation is run for the first
//              time on given machine. In the handler installation usually displays
//              UI allowing end user to specify installation parameters. After this
//              function returns, FeatureTransferData is called to perform file
//              transfer.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    NUMBER  nResult;                      	  //Every Dialog variable
    STRING  szTitle, szMsg;               	  //Every Dialog variable
    STRING  szLicenseFile;                    //SdLicense variable
    NUMBER  bLicenseAccepted;    	 		  //SdLicense variable
    STRING  szDir;                        	  //SdFeatureDialog variable
    LIST    listData,listInfo;            	  //SdStartCopy and SdShowInfoList variable
    NUMBER  listID,ServicePackID;             //SdShowInfoList variable
    NUMBER  nvReturn1,nvReturn2,nvReturn3;	  //SdShowInfoList variable
    STRING  svReturn,szInfo1,szInfo2,szInfo3; //SdShowInfoList variable
    STRING  rightID, svSTRING;                //SdShowInfoList variable
    NUMBER  nUser;							  //SdCustomerInformation variable 
    STRING  svResult1,svResult2,svResult3;    //SdFeatureDialog variable 
    NUMBER  nvType,nvSize;
    NUMBER  nBack;     
    STRING  svTmp;
    NUMBER  iResult;  
    STRING szCaption;
begin	
/*
Dlg_Start:
    // beginning of dialogs label
  	 
Dlg_SdWelcome:
    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome( szTitle, szMsg );
    if (nResult = BACK) goto Dlg_Start; 
*/   // TO DO: if you want to enable background, window title, and caption bar title                                                                     
    // SetTitle( @PRODUCT_NAME, 24, WHITE );                                        
    // SetTitle( @PRODUCT_NAME, 0, BACKGROUNDCAPTION ); 	                   
    // Enable( FULLWINDOWMODE );						   
    // Enable( BACKGROUND );							  
    // SetColor(BACKGROUND,RGB (0, 128, 128));	
    DeleteFile(SUPPORTDIR ^"builddatetime.txt");   
	RunApplication(SUPPORTDIR ^"getsystemdatetime.bat","\""+SUPPORTDIR^"builddatetime.txt"+"\"",FALSE,TRUE);   	
    WriteLogFile(VERSION_ES_PACKAGE_DATE + ReadString(SUPPORTDIR,"builddatetime.txt",FALSE));	
    
    SdShowMsg ("Checking system information", TRUE);     			   
    GetSysInfo();
    
    RunApplication( SUPPORTDIR ^ "addnetfxlog.bat", "\""+LOGFILE_PATH + LOGFILE_NAME+"\"",FALSE, TRUE);
   	
    SHELL_OBJECT_FOLDER = @PRODUCT_NAME;
    //nSetupType2 = TYPICAL;	
    szDir = INSTALLDIR;
    svUserName    = "";
    szCompany = "";
    
    //判断是否安装过NetBrain Server,如果安装过，让用户先删除以前的版本，然后再继续安装
    nvType = REGDB_STRING; 
    nvSize = -1;
    if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
 		nResult = RegDBGetKeyValueEx( REGPATH_WEBSERVER, REGKEY_INSTALLDIR,nvType,INSTALLDIR,nvSize); 
  		if(nResult = 0) then
  			WriteLogFile( MSG_ERR_UNINSTALL_FIRST );
  			MessageBox( MSG_ERR_UNINSTALL_FIRST, INFORMATION);
    		abort;
    	endif;		 	  
     endif;   
     
    if( CheckEAP() = 0 ) then
   		abort;                  
   	endif;      
   	 
   	WriteLogFile( MSG_OK_CHECK_SYSTEM ); 
   	 
   	if(CheckNeedInstallNetFx3()==1) then 
   	    WriteLogFile( MSG_ERR_NETFX35_NOTEXISTS );  
   	else
   	    WriteLogFile( MSG_NETFX35_EXISTS );  
   	endif;
   	
  	nvType = REGDB_STRING;
  	svPostgreDbDataDir="";
    svDataSetupTime="";
  	nvInstallDataDir = 0;
  	svDataDirRoot="";
  	svCurrentVersion="";                                                             
 	RegDBGetKeyValueEx(REGPATH_DBINFO,REGKEY_PG_DATADIR,nvType,svPostgreDbDataDir,nvSize);
 	RegDBGetKeyValueEx(REGPATH_DBINFO,REGKEY_PG_USERNAME,nvType,svDBUserName, nvSize);
 	RegDBGetKeyValueEx(REGPATH_DBINFO,REGKEY_PG_PASSWORD,nvType,svDBPwd,nvSize);
   	RegDBGetKeyValueEx(REGPATH_DBINFO,REGKEY_PG_SETTIME,nvType,svDataSetupTime,nvSize);
   	RegDBGetKeyValueEx(REGPATH_DBINFO,REGKEY_ROOTDIR,nvType,svDataDirRoot,nvSize);
   	RegDBGetKeyValueEx(REGPATH_DBINFO,REGKEY_ES_VERSION,nvType,svCurrentVersion,nvSize);
 	nvType = REGDB_NUMBER;
 	RegDBGetKeyValueEx(REGPATH_DBINFO,REGKEY_PG_PORT,nvType,svDBPort,nvSize);
 	
 	WriteLogFile( "REGVAL:" + REGKEY_PG_DATADIR + ":" + svPostgreDbDataDir ); 
 	WriteLogFile( "REGVAL:" + REGKEY_PG_USERNAME + ":" + svDBUserName ); 
 	WriteLogFile( "REGVAL:" + REGKEY_PG_PASSWORD + ":" + svDBPwd ); 
 	WriteLogFile( "REGVAL:" + REGKEY_PG_SETTIME + ":" + svDataSetupTime ); 
 	WriteLogFile( "REGVAL:" + REGKEY_ROOTDIR + ":" + svDataDirRoot ); 
 	WriteLogFile( "REGVAL:" + REGKEY_PG_PORT + ":" + svDBPort ); 
 	
 	if( svPostgreDbDataDir = "" ) then
 		WriteLogFile( MSG_INFO_NEED_INSTALLDATA ); 
   		nvInstallDataDir = 1;     
   	endif;         
   	
   	if( svDataDirRoot != "" ) then          
   		WriteLogFile( MSG_INFO_OLDPATH_EXISTS ); 
   	 	INSTALLDIR=svDataDirRoot;
   	endif;
   	
   	if (ExistsDir ( INSTALLDIR^"Enterprise Server 3.0" ) = 0)then      
   	    WriteLogFile( "exists es 3.0 dir");
   	    if (ExistsDir ( INSTALLDIR^"Enterprise Server" ) = 0)then      
   	    	WriteLogFile( "exists es 3.0 dir and 3.1plus dir");
   	    	if(RenameFile ( INSTALLDIR^"Enterprise Server", INSTALLDIR^"Enterprise Server"+GetTEMPDIRNAME() )<0)  then  
   	    	WriteLogFile( MSG_ERR_RENAME_OLD_DIR );
   	    	SdShowMsg ("", FALSE); 
   	   		RebootDialog ( "Reboot", "You must restart your computer before installing Enterprise Server", SYS_BOOTMACHINE ); 
   	  	    abort;
   	 	    endif;
   		endif;
   	    if(RenameFile ( INSTALLDIR^"Enterprise Server 3.0", INSTALLDIR^"Enterprise Server" )<0)  then  
   	    WriteLogFile( MSG_ERR_RENAME_OLD_DIR );
   	    SdShowMsg ("", FALSE); 
   	    RebootDialog ( "Reboot", "You must restart your computer before installing Enterprise Server", SYS_BOOTMACHINE ); 
   	    abort;
   	    endif;
   	endif;
   	
//  	if( svDataSetupTime = "" ) then                  
   		WriteLogFile( MSG_INFO_BUILD_SETUPTIME ); 
   		GetSystemInfo( DATE, nvReturn1, svResult1 );  
   		svDataSetupTime = svResult1;
   		svDataSetupTime = svDataSetupTime + " ";
   		GetSystemInfo( TIME, nvReturn1, svResult1 );
   		svDataSetupTime = svDataSetupTime + svResult1;
//   	endif;  
   	
   	WriteLogFile( MSG_INFO_FINISH_CHECK_OLDDATA ); 
    
Dlg_Start:
    // beginning of dialogs label
  	SdShowMsg ("", FALSE); 
Dlg_SdWelcome:
    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome( szTitle, szMsg );
    if (nResult = BACK) goto Dlg_Start;  
    WriteLogFile( MSG_INFO_STEP_OUT_WELCOME );
    
Dlg_SdShowInfoList:
 	szTitle = "System detecting \n"+"  "+"Please read the following text.";
    szMsg   = "The text below describes the system configuration."; 
    listInfo = ListCreate (STRINGLIST); 
    //get CPU information
    GetSystemInfo (CPU, nvReturn1, svReturn);
    if( nvReturn1 == IS_UNKNOWN ) then
 		szInfo1 = "CPU:Unknown";
    else
    	Sprintf(szInfo1, "CPU: %d", nvReturn1,svReturn);
    endif;
    //get EXTENDED MEMORY information
    GetSystemInfo (EXTENDEDMEMORY, nvReturn2, svReturn);
    Sprintf(szInfo2, "Extended Memory: %d MB", nvReturn2/1024,svReturn);
    //get OS information
    //GetSystemInfo (OS, nvReturn3, svReturn);
    //if(Is(USER_INADMINGROUP,"") ==TRUE) then
    if(SYSINFO.WINNT.bAdmin_Logged_On) then
      	rightID = "Privileges : Administrative Privileges ";
    else
        rightID = "Privileges : You don't have enough privilege to continue the installation, please contact the administrator. If this is Windows 2008, maybe you need rerun the installation program by menu 'Run as administrator'.";
    endif;
     
    ServicePackID = SYSINFO.WINNT.nServicePack;
    NumToStr ( svSTRING, ServicePackID );    
    
	if(SYSINFO.WINNT.bWinServer2003) then
    	szInfo3 = "Operating System: Windows 2003 Service Pack"+" "+svSTRING;
        if(ServicePackID < 1 ) then
            listID = 3;
        endif;
    endif;
    if(SYSINFO.WINNT.bWinVista_Server2008=TRUE)then 
    	szInfo3 = "Operating System: Windows 2008";
    	if(ServicePackID >0 ) then
    		szInfo3 =  szInfo3+" Service Pack "+   svSTRING;
    	endif;
    endif;
    if(SYSINFO.WINNT.bWin7_Server2008R2=TRUE) then      
   		szInfo3 = "Operating System: Windows 2008 R2";
    	if(ServicePackID >0 ) then
    		szInfo3 =  szInfo3+" Service Pack "+   svSTRING;
    	endif;
    endif;
         
    ListAddString(listInfo, szInfo1, AFTER);
    ListAddString(listInfo, szInfo2, AFTER);
    ListAddString(listInfo, szInfo3, AFTER);
    ListAddString(listInfo, rightID, AFTER); 
    
    nResult = SdShowInfoList ( szTitle, szMsg, listInfo );
    ListDestroy(listInfo);
    if(nResult = BACK) goto Dlg_SdWelcome; 
   
 
    if(rightID = "Privileges : You don't have enough privilege to continue the installation, please contact the administrator. If this is Windows 2008, maybe you need rerun the installation program by menu 'Run as administrator'.") then
    	WriteLogFile( MSG_ERRO_CHECK_ADMIN );
    	MessageBox(MSG_ERRO_CHECK_ADMIN,WARNING);
        abort;
    endif;    
       
    if( listID=3 ) then                   
    	WriteLogFile( MSG_ERRO_CHECK_SP_VER );
    	MessageBox(MSG_ERRO_CHECK_SP_VER,INFORMATION);
    endif;                                 
    
    WriteLogFile( MSG_INFO_STEP_OUT_SYSINFO );
 
Dlg_SdLicense:
    szLicenseFile = SUPPORTDIR ^ "license.txt";
    szTitle    = "";
    szMsg      = "";
    //szQuestion = "";
    nResult    = SdLicense( szTitle, szMsg, "", szLicenseFile ); 
    //nResult    = SdLicense2 ( szTitle, "", "", szLicenseFile, bLicenseAccepted ); 
    if (nResult = BACK) goto Dlg_SdShowInfoList;  
    
    WriteLogFile( MSG_INFO_STEP_OUT_LICENSE );

    
Dlg_SdCustomerInformation:
	szTitle = "";
	szMsg   = "";
	nResult = SdCustomerInformation ( szTitle, svUserName, szCompany,nUser);
	if (nResult = BACK) goto Dlg_SdLicense;      
	
	WriteLogFile( MSG_INFO_STEP_OUT_CUSTOMERINFO + ":" + svUserName + ":" + szCompany   );          

   	//FeatureSelectItem (MEDIA, "WebServer", TRUE);
   	//FeatureSelectItem (MEDIA, "Postgresql", TRUE);  
   	
Dlg_SdFeatureTree: 
    szTitle    = "";
    szMsg      = "";
	nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
	if (nResult = BACK) goto Dlg_SdCustomerInformation;  
	 
	if FeatureIsItemSelected (MEDIA,"LicenseServer")&& FeatureIsItemSelected (MEDIA,"GateWayServer")  then
	      
	    szCaption= "Connect License Server and GateWay Server";
		szMsg  = "Are you want to make License Server and GateWay Server togerthor?";  
		SetDialogTitle ( DLG_ASK_OPTIONS, "Workspace Data" );
		AskOptions ( NONEXCLUSIVE, szMsg, szCaption, nvCheckDeleteAllData);  

    endif;  
	    
		 

	
	
	//new install begin
	if( nvInstallDataDir == 1 ) then 
Dlg_InputPostgresInfo:
   	if (0 = InputPostgresInfo()) goto Dlg_SdFeatureTree;   
   	
   	WriteLogFile( MSG_INFO_STEP_OUT_INPUT_PGINFO  );
            
Dlg_SdFeatureDialog:     
	szTitle = "Choose Destination Location \n"+"  "+"Select folder where Setup will install files.";
    szMsg   = "Setup will install %P in the following folder.\n\nTo install to this folder, click Next. To install to a different folder, click Browse and select another folder.";
    nResult = SdAskDestPath2 ( szTitle, szMsg, INSTALLDIR);     
    szDir = INSTALLDIR;
    if (nResult = BACK) then
   		goto Dlg_InputPostgresInfo;  
    endif;
   	
   	nResult=(szDir[1] = ":") && (szDir[2] = "\\");
   	if(!nResult)then 
   		Sprintf( svTempVal, MSG_ERR_PATH_FORMAT, szDir );
   		WriteLogFile( svTempVal );
    	MessageBox (svTempVal, WARNING);
    	goto Dlg_SdFeatureDialog;
    endif; 

   	INSTALLDIR = szDir;   
   	svDataDirRoot = INSTALLDIR;  
   	
   	
   	svLICInstalldir=svDataDirRoot ^ "License Server";
   	svGWInstalldir=svDataDirRoot ^"GateWay Server";
   	svWSPDir=svDataDirRoot ^"WorkSpace Server"^svWSPName;
   	
   	
   	if( svPostgreDbDataDir == "" ) then
   		svPostgreDbDataDir=svDataDirRoot ^ "Postgresql 8.4\\Database";
   	endif;   
   	   	
   	if( nvInstallDataDir == 1 ) then
   		svPostgreDbDataDir=svDataDirRoot ^ "Postgresql 8.4\\Database";
   	endif;
   	  
  	//dir lenth 
  	if(StrLength(szDir)>100) then
        MessageBox("The path is too long.", SEVERE);
        goto Dlg_SdFeatureDialog;
  	endif;
  	
  	if(CheckPathSpecChar(szDir)==0)then
  		goto Dlg_SdFeatureDialog;
  	endif;
  	
  	iResult = GetDiskSpaceEx(szDir, MBYTES);  
  	if (iResult < DISKSPACE_G) then
        MessageBox(DISKSPACENOTENOUGH, SEVERE);
        goto Dlg_SdFeatureDialog;
    endif;
    
   	WriteLogFile( MSG_INFO_STEP_OUT_INPUT_ROOTDIR + ":" + INSTALLDIR  );

Dlg_InputPostgresDbDataDir:
 	if (0 = InputPostgresDbDataDir()) goto Dlg_SdFeatureDialog;

  	//dir lenth 
  	if(StrLength(svPostgreDbDataDir)>100) then
        MessageBox("The path is too long.", SEVERE);
        goto Dlg_InputPostgresDbDataDir;
  	endif;    	
  	if(CheckPathSpecChar(svPostgreDbDataDir)==0)then
  		goto Dlg_InputPostgresDbDataDir;
  	endif;
  	iResult = GetDiskSpaceEx(svPostgreDbDataDir, MBYTES);  
  	if (iResult < DISKSPACE_G) then
        MessageBox(DISKSPACENOTENOUGH, SEVERE);
        goto Dlg_InputPostgresDbDataDir;
    endif;
 	WriteLogFile( MSG_INFO_STEP_OUT_INPUT_PGDIR + ":" + svPostgreDbDataDir  );
 	
	svTmp = svPostgreDbDataDir; 
	StrRemoveLastSlash (svTmp);
	SdShowMsg ("Checking file and directory permissions, please wait...", TRUE);  
	RunApplication(SUPPORTDIR ^ "c_adduserright.bat","\""+LOGFILE_PATH + LOGFILE_NAME +"\" \""+ svPostgreDbDataDir+"\" \""+ szDir+"\"", FALSE, TRUE );
	CreateDir ( szDir );
	CreateDir ( svTmp );              
	szDir = svTmp; 
	svTmp = "\"" + svTmp + "\"";
	RunApplication(SUPPORTDIR ^ "c_adduserright.bat","\""+LOGFILE_PATH + LOGFILE_NAME +"\" \""+ svPostgreDbDataDir+"\" \""+ svPostgreDbDataDir+"\"", FALSE, TRUE );
	RunApplication(SUPPORTDIR ^ "Postgres84UserSetup.bat", svTmp, FALSE, TRUE );
	RunApplication(SUPPORTDIR ^ "addtempdirright.bat","\""+LOGFILE_PATH + LOGFILE_NAME +"\"", FALSE, TRUE );
	WriteLogFile(MSG_STEP_BEFORE_RUN_TSCHMOD);
	RunApplication( SUPPORTDIR ^ "Tschmod.exe", svTmp, FALSE, TRUE );
	//CheckCurrentRight(svTmp);
	         
	DeleteDir ( szDir, ONLYDIR );
	SdShowMsg ("", FALSE);  
    nResult = LAAW_PARAMETERS.nLaunchResult;
    if (nResult!=0) then                                                
    	WriteLogFile( MSG_ERRO_CHECK_PG_ADMIN );
    	MessageBox(MSG_ERRO_CHECK_PG_ADMIN,WARNING);
        goto Dlg_InputPostgresDbDataDir;
    endif;  	

	endif;    
   	//new install end  
   	/**/                                                  
   	if (CheckNeedInstallNetFx3()!=1)then 
   		if(CheckAspnetState()==0)then
   			SdShowMsg ("checking aspnet state service ...", TRUE);   
   			if (svOSVer=="win08") then
   				if(SYSINFO.WINNT.bWinVista_Server2008=TRUE) then
   		    		RunApplication( SUPPORTDIR ^ "installaspnetiis7.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\" ServerManagerCmdvista.exe",FALSE, TRUE);	
   				else
   					RunApplication( SUPPORTDIR ^ "installaspnetiis7.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\" ServerManagerCmdr2.exe",FALSE, TRUE);	
   				endif;   		
   			endif;
   			if(CheckAspnetState()==0)then
   				RunApplication( SUPPORTDIR ^ "Installaspnet_regiis.bat", "\"" + LOGFILE_PATH + LOGFILE_NAME + "\"",FALSE, TRUE);
   			endif;
   			SdShowMsg ("", FALSE);		
   		endif;
    	nResult = RunApplication( SUPPORTDIR ^ "RegAspStateStartKey.exe", "",FALSE, TRUE);
		WriteLogFile( MSG_INFO_STEP_OUT_REGKEY_START_ASPNET_STATE_CHECK ); 	 
   		if(CheckAspnetState()==0)then 
   			WriteLogFile("Failed to install aspnet state service!");
   			//RebootDialog ( "Reboot", "You must restart your computer before installing Enterprise Server", SYS_BOOTMACHINE );
   			MessageBox("aspnet state service was not installed correctly", SEVERE);
   			//abort;
   		endif;
   	endif;
   	/**/
Dlg_SdStartCopy:
    szTitle = "";
    szMsg   = "";
    listData = ListCreate( STRINGLIST );  
    //Add STRING of Setup Type
    //ListAddString(listData, "Setup Type:", AFTER);
    //ListAddString(listData, "              " + nSetupType, AFTER);
    //ListAddString(listData, "", AFTER);
    //Add STRING of Destination Directory
    ListAddString(listData, "Destination Directory:", AFTER);
    ListAddString(listData, "              " + INSTALLDIR, AFTER);
    ListAddString (listData, "", AFTER);
    //Add STRING of User Information
    ListAddString (listData, "User Information: ", AFTER);
    ListAddString (listData, "              "+"User Name:" + svUserName, AFTER);
    ListAddString (listData, "              "+"Company Name:" + szCompany, AFTER);
    //ListAddString (listData, "              "+"Serial NUMBER:" + szSerial, AFTER); 
    //ListAddString (listData, "              "+"Maintenance NUMBER:" + szMaintenance, AFTER);  
    ListAddString (listData, "", AFTER);
                                           
    nResult = SdStartCopy( szTitle, szMsg, listData );	
    ListDestroy(listData);
    if (nResult = BACK) then    
    	if ( nvInstallDataDir = 1 ) then
 			goto Dlg_InputPostgresDbDataDir;
 		else
 			goto Dlg_SdCustomerInformation;
 		endif;
    endif;	
   
   	WriteLogFile( MSG_INFO_STEP_OUT_STARTCOPY );    
Dlg_install:
	    	
    Enable(STATUSEX);

    return 0;
  
end;   
//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIAfter
//
//  EVENT:      FirstUIAfter event is sent after file transfer, when installation 
//              is run for the first time on given machine. In this event handler 
//              installation usually displays UI that will inform end user that
//              installation has been completed successfully.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
    STRING  szTitle,szMsg1, szMsg2, szOption1, szOption2;   //SdFinish variable 
    NUMBER  bOpt1, bOpt2, nResult;                          //SdFinish variable
    NUMBER  nvResult;
    NUMBER  nvRet;    
    STRING szCaption;
begin
    Disable(STATUSEX); 
    
	nvRet = 0; 
   	/*PostgresUninstall( ); 
   	StrRemoveLastSlash (svPostgreDbDataDir);
    SdShowMsg ("Installing postgresql 8.4, please wait...", TRUE);  
    nvResult = 0;
    if( nvInstallDataDir = 1 )  then    
		nvResult=PostgresInstall1();  
	endif;                        
	PostgresInstall2();  
    SdShowMsg ("", FALSE);    
    if( nvResult != 0 ) then 
    	nvRet = -1;
    endif;  
    
	WriteLogFile( MSG_INFO_STEP_OUT_INSTALLPG );        
    DeleteFile ( LOGFILE_PATH+"postgrespasswd.txt" );   */
                                                                
    
 	Disable( LOGGING ); 
   	//WriteRegistryWeb();
   	WriteRegistryPostgres(); 
   	Enable( LOGGING );  

                    
    szMsg1 = "";
    szMsg2 = ""; 
    szOption1 = "";
    szOption2  = "";
    // Display the SdFinish dialog box.
    nResult=SdFinish (szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);    
    
    if( nvRet != 0 ) then 
    	MessageBox ("Error occurred during installation of Enterprise Server. Please contact NetBrain with the installation log at " + LOGFILE_PATH + LOGFILE_NAME, SEVERE);
    endif;  
	SignSetupexe();
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMaintUIBefore
//
//  EVENT:      MaintUIBefore event is sent when end user runs installation that
//              has already been installed on the machine. Usually this happens 
//              through Add/Remove Programs applet. In the handler, installation 
//              usually displays UI allowing end user to modify existing installation
//              or uninstall application. After this function returns, 
//              FeatureTransferData is called to perform file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function OnMaintUIBefore()
    NUMBER nResult, nType, nvSize, nvType;
    STRING szTitle, szMsg, svResult, szCaption; 
    STRING svResult1,svResult2,svResult3;    //SdFeatureDialog variable    
    BOOL  bPrepareDB, bPrepareBS, bPrepareCMDB; 
    NUMBER nvPostgresSelected;
begin     
Dlg_Start:
	 svOSVer="win03";
	 CheckEAP2008();
	 if(SYSINFO.WINNT.bAdmin_Logged_On == FALSE) then
        WriteLogFile( MSG_ERRO_CHECK_ADMIN );
    	MessageBox(MSG_ERRO_CHECK_ADMIN,WARNING);
        abort;
     endif;
	//get INSTALLDIR
    if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
		nvType = REGDB_STRING; 
 		nvSize = -1;
 		nResult = RegDBGetKeyValueEx("SOFTWARE\\NetBrain\\NetBrain Enterprise Server\\WebServer","netbrainDir",nvType,INSTALLDIR,nvSize); 
	endif;
    Disable(BACKBUTTON); 
    
    Dlg_SdFeatureTree: 
    szTitle    = "";
    szMsg      = "";
	nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
	if (nResult = BACK) goto Dlg_Start;  
    

	szCaption= "Delete all workspace data.";
	szMsg  = "Are you sure you want to remove the NetBrain Enterprise server?";  
	SetDialogTitle ( DLG_ASK_OPTIONS, "Workspace Data" );
	nResult= AskOptions ( NONEXCLUSIVE, szMsg, szCaption, nvCheckDeleteAllData);  
    if (nResult = IDCANCEL) then 
    	abort;
    endif;  
	        
	Disable(CANCELBUTTON);
    nResult = NEXT;  
	SdShowMsg ("Removing, please wait...", TRUE); 
	//EAPUninstall(); 
	//BSUninstall();        	
	PostgresUninstall();
	SdShowMsg ("", FALSE);   
	//DeleteFile(FOLDER_PROGRAMS^"NetBrain\\Enterprise Server 4.1\\Home Page.url");
	FeatureRemoveAll();
	DeleteRegistryWeb();
    Enable(STATUSEX);
end;
            
//---------------------------------------------------------------------------
// OnMaintUIAfter
//
// The OnMaintUIAfter event called by the framework after the file transfer
// of the setup when the setup is running in maintenance mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//---------------------------------------------------------------------------
function OnMaintUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;  
    STRING szFileName;
    NUMBER bOpt1, bOpt2;    
    NUMBER nResult, nvType, nvSize ,nReturn; 
    LIST listID;
    STRING szString;
begin
	Disable(STATUSEX);  
	
	//RemovePatchData();
	//Removecheckupdatefiles();
	
	if( nvCheckDeleteAllData = TRUE ) then
        SdShowMsg ("Deleting workspace data...", TRUE);
        //删除只读,隐藏文件
        nResult=FindAllFiles(INSTALLDIR^"License Server","*.*",szFileName,RESET);
        while(nResult = 0)
	        if (SetFileInfo( szFileName ,FILE_ATTRIBUTE , FILE_ATTR_NORMAL ,"" )<0) then
	        	WriteLogFile("Unable to clear file attributes. FilePath: "+szFileName);
	        endif;
	        nResult=FindAllFiles(INSTALLDIR^"License Server","*.*",szFileName,CONTINUE); 
        endwhile; 
       
       DeleteAgain: 
       if (DeleteDir(INSTALLDIR ^ "License Server",ROOT)<0) then            //Bug 43034 
       		WriteLogFile("Unable to delete "+INSTALLDIR^"Enterprise Server");   
       		listID=ListCreate(STRINGLIST); 
       		szString=INSTALLDIR^"License Server";
       		ListAddString (listID, szString, AFTER);  
       		//MessageBox("Unable to delete "+INSTALLDIR^"Enterprise Server. "+"Maybe some files is in use,please check!",WARNING);
       		nReturn=SdFilesInUse("","Unable to delete the folder below. Maybe some files inside the folder are in use. Please check!","",listID);    
       		ListDestroy(listID); 
       		if (nReturn = IDRETRY) then
       			goto DeleteAgain;   
       		endif;
       endif;
       
	  	RegDBGetKeyValueEx("SOFTWARE\\NetBrain","EAPPostgresDataDir",nvType,svPostgreDbDataDir,nvSize);
	 	if( svPostgreDbDataDir != "" ) then 
	        nResult=FindAllFiles( svPostgreDbDataDir,"*.*",szFileName,RESET);
	        while(nResult = 0)
		        SetFileInfo ( szFileName ,FILE_ATTRIBUTE , FILE_ATTR_NORMAL ,"" );
		        nResult=FindAllFiles( svPostgreDbDataDir,"*.*",szFileName,CONTINUE); 
	        endwhile; 
	        DeleteDir(svPostgreDbDataDir, ROOT); 	 	
	   	endif;          
        
        nResult=FindAllFiles(INSTALLDIR^"Postgresql 8.4","*.*",szFileName,RESET);
        while(nResult = 0)
	        SetFileInfo ( szFileName ,FILE_ATTRIBUTE , FILE_ATTR_NORMAL ,"" );
	        nResult=FindAllFiles(INSTALLDIR^"Postgresql 8.4","*.*",szFileName,CONTINUE); 
        endwhile;               
        
        DeleteDir(INSTALLDIR ^ "Postgresql 8.4", ROOT);
        
        //
        DeleteRegistryPostgres(); 
        
        SdShowMsg ("", FALSE);
	endif;
    

    szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
    szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);


	bOpt1   = FALSE;
    bOpt2   = FALSE;    
    //if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then    
    //	RegDBSetKeyValueEx("SYSTEM\\CurrentControlSet\\Services\\aspnet_state","Start",REGDB_NUMBER,"2",-1);		
    //endif;
    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else    
       	SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bOpt1 , bOpt2 );
    endif;
end;          
// SdLicense2 ---------------------------------------------------------------
function SdLicense2( szTitle, szOpt1, szOpt2, szLicenseFile, bLicenseAccepted )
begin
    return SdLicense2Ex( szTitle, szOpt1, szOpt2, szLicenseFile, bLicenseAccepted, FALSE );
end;
//---------------------------------------------------------------------------
// OnUninstall
//
// The OnUninstall event is called when the setup is run with the -uninst
// switch, in this case this is the only event that will be called.
//---------------------------------------------------------------------------
function OnUninstall()
	BOOL   bOpt1, bOpt2;
	int    nReturn;
	string szTitle, szMsg1, szMsg2, szOpt1, szOpt2, svResult, szCaption;
begin
	
    // Added in InstallShield 15 - Show an appropriate error message if
    // -uninst is specified and the product is not installed.
    if( !MAINTENANCE ) then
		szMsg1 = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg1 );
		MessageBox( szMsg1, SEVERE );
		abort;
    endif;

    svResult = SdLoadString(ISWI_IS5_UNINST_MSG);
	szCaption = SdLoadString(IFX_ONMAINTUI_CAPTION);
	Sprintf (svResult, svResult, @PRODUCT_NAME);
	if (IDCANCEL = SprintfBox(MB_OKCANCEL, szCaption, svResult)) then
		abort; 
	endif;

	// Added in IS 2009 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );

    // Uninstall the application
	Enable(STATUSEX);
    ComponentRemoveAll();
    ComponentTransferData(MEDIA);
	Disable(STATUSEX);

	bOpt1 = FALSE;
	bOpt2 = FALSE;

    // Show final dialog.
    if ( BATCH_INSTALL ) then
        SdFinishReboot( SdLoadString(IFX_SDFINISH_REMOVE_TITLE), SdLoadString(IFX_SDFINISH_REMOVE_MSG2), SYS_BOOTMACHINE, "", 0 );
    else    
        SdFinish( SdLoadString(IFX_SDFINISH_REMOVE_TITLE), SdLoadString(IFX_SDFINISH_REMOVE_MSG1), "", "" , "", bOpt1 , bOpt2 );
    endif;

end;
//---------------------------------------------------------------------------
// OnEnd
//
// The OnEnd event is called at the end of the setup. This event is not
// called if the setup is aborted.
//---------------------------------------------------------------------------
function OnEnd()
begin
	SignSetupexe(); 
	
	
end;


#include "featureevents.rul"